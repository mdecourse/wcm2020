<h1>About</h1>
<p>Repository: <a href="https://github.com/mdecourse/wcm2020">https://github.com/mdecourse/wcm2020</a></p>
<p>Project: <a href="https://github.com/mdecourse/wcm2020/projects/1">https://github.com/mdecourse/wcm2020/projects/1</a></p>
<p>Gitter: <a href="https://gitter.im/mdecourse/wcm2020">https://gitter.im/mdecourse/wcm2020</a></p>
<p>Web site: <a href="https://mde.tw/wcm2020">https://mde.tw/wcm2020</a> </p>
<p>Blog: <a href="https://mde.tw/wcm2020/blog">https://mde.tw/wcm2020/blog</a> </p>
<p>Presentation:  <a href="https://mde.tw/wcm2020/reveal">https://mde.tw/wcm2020/reveal</a> </p>
<p>參考: <a href="https://mde.tw/cd2020pj1">https://mde.tw/cd2020pj1</a></p>
<h4><span><a href="https://drive.google.com/open?id=1cZFSsLEoGOBYojzKzFEf4YH2l--pbS-9"></a></span>電腦輔助設計室與協同設計室行事曆</h4>
<p><a href="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei">全頁檢視</a></p>
<p><iframe height="600" src="https://calendar.google.com/calendar/embed?src=mde.nfu.edu.tw_3439313938333136353439%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;mode=week&amp;src=mde.nfu.edu.tw_35303530373431313438%40resource.calendar.google.com&amp;ctz=Asia%2FTaipei&amp;src=yen%40gm.nfu.edu.tw&amp;ctz=Asia%2FTaipei" width="800"></iframe></p>
<p>請登入 gm 電子郵箱後, 填寫下列表單:</p>
<p style="padding-left: 30px;"><a href="https://docs.google.com/forms/d/e/1FAIpQLSfetOEX-l_KYPUZuUuPft5IC1t-FttkoX1s_Nh9FRxYZXKYWA/viewform?usp=sf_link">選課學員基本資料</a></p>
<p style="padding-left: 30px;"><a href="https://docs.google.com/forms/d/e/1FAIpQLSdSvo89BOMfQOxFflhx-b3eDa_kYP0lUkTLfotdr1AEyQbItw/viewform?usp=sf_link">課程回饋表單</a></p>
<p style="padding-left: 30px;"><a href="https://docs.google.com/forms/d/e/1FAIpQLSfzbBnD7-GL2Nc41vmu2vGB6foETL0cNJpg7yrnMaHCqjRA9w/viewform?usp=sf_link">網際內容管理自評與互評表單</a></p><h1>Grouping</h1>
<h4>亂數分組:</h4>
<p><a href="https://mde.tw/wcm2020/downloads/2020spring_wcm_1a_list.txt">https://mde.tw/wcm2020/downloads/2020spring_wcm_1a_list.txt</a> was taken from <a href="https://osa.nfu.edu.tw/">https://osa.nfu.edu.tw/</a> on Feb. 19, 2020.</p>
<p>The most updated list: <a href="http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=0744">http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=0744</a> </p>
<p>semester: 1082</p>
<p>courseno: 0744</p>
<p>Under https protocol use port 7443, for http use port 8000.</p>
<p>學員名單 URL: <input id="studListUrl" size="70" type="text" value="http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=0744 "/><br/> <input id="submit" type="submit" value="開始分組"/><br/> <textarea cols="80" id="output" rows="10"></textarea></p>
<script src="https://mde.tw/wcm2020/downloads/dart_ex/even_grouping/evenGrouping.js"></script>
<p><a href="https://dartpad.github.io/embed-html.html?gh_owner=mdecourse&amp;gh_repo=cd2020&amp;gh_path=downloads/dart_ex/even_grouping&amp;theme=dark">Dart source code for random grouping</a></p>
<h4>evenGrouping.dart:</h4>
<pre class="brush:dart;auto-links:false;toolbar:false" contenteditable="false">import 'dart:html';
 
  InputElement studListUrl = querySelector("#studListUrl");
  String studUrl;
  // 將 Label 改為 Textarea, 避免產生過程結果嵌入所在頁面
  TextAreaElement output = querySelector("#output");
 
main() {
  querySelector("#submit").onClick.listen((e) =&gt; grouping());
}
 
grouping() {
  output.innerHtml = "";
 
  if (studListUrl.value != "") {
    studUrl = studListUrl.value;
  } else {
    studUrl = 'https://mde.tw/group/downloads/2019fall_cp_1a_list.txt';
  }
 
  // 組序由 1 開始
  int gth = 1;
  // 迴圈序號變數
  int i;
  int j;
  int total;
  int inc;
  // 每組學員暫存數列
  var gpList = [];
  // 全班分組數列
  var group = [];
  // 各組人數數列
  var numList = [];
  var courseTitle = 'wcm2020';
 
  HttpRequest.getString(studUrl).then((String resp) {
    // 利用 trim() 去除字串最後的跳行符號, 之後再利用 split() 根據 \n 轉為數列
    var studList = resp.trim().split("\n");
    // 數列利用 shuffle() 方法以隨機方法弄亂順序
    studList.shuffle();
    total = studList.length;
    output.text += "全班總計" + total.toString() + " 人\n";
    numList = getNumList(studList.length);
    inc = 0;
    for (i in numList){
      // 列印區隔符號
      output.text += '=' * 20 + "\n";
      output.text += "group $gth 有 " + i.toString() + " 人: \n";
      gpList = [];
      for (j = 0; j &lt; i; j++){
        output.text += studList[j+inc] + "\n";
        // 在各分組數列中加入將對應的學員學號
        gpList.add(studList[j+inc]);
      }
      gth = gth + 1;
      inc = inc + j;
        //output.text += studList[j] + "\n";
        // 逐步將各組暫存的分組數列加入全班分組數列中
      gpList.sort();
      group.add(gpList);
    }
    // 列出全班分組數列
    output.text += group.toString() + "\n";
    // 列出已經排序後的分組名單
    output.text += '=' * 25 + "\n";
    output.text += '以下為排序後的各組成員名單: \n';
    gth = 1;
    /*
    404231
    s4052
    4062
    s4072
    4082
    5072
    5083
    */
    // 先列出純文字以 \n 跳行組員資料
    for (i=0; i &lt; group.length; i++){
      // 列印區隔符號
      output.text += '=' * 20 + "\n";
      output.text += "group $gth \n";
      gpList = [];
      for (j=0; j &lt; group[i].length; j++){
        output.text += group[i][j] + "\n";
      }
      gth = gth + 1;
    }
    
    gth = 1;
    // 最後列出超文件以 &lt;br\&gt; 跳行組員資料, 包含倉儲與網站
    for (i=0; i &lt; group.length; i++){
      // 列印區隔符號
      output.text += '\n' + '=' * 30 + "&lt;br \&gt;";
      output.text += "group $gth &lt;br \&gt;";
      gpList = [];
      for (j=0; j &lt; group[i].length; j++){
          if (group[i][j].startsWith('4052') || group[i][j].startsWith('4072')) {
              output.text += "Repository: &lt;a href='https://github.com/s" + 
                                      group[i][j] + "/" + courseTitle + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;" + " | Site: &lt;a href='https://s" + group[i][j] + 
                                      ".github.io/" + courseTitle + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;&lt;br \&gt;";
          }
          else {
              output.text += "Repository: &lt;a href='https://github.com/" + 
                                      group[i][j] + "/" + courseTitle +"'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;" + " | Site: &lt;a href='https://" + group[i][j] + 
                                      ".github.io/" + courseTitle + "'&gt;" + group[i][j] + 
                                      "&lt;/a&gt;&lt;br \&gt;";
          }
      }
      gth = gth + 1;
    }
  });
}
 
List getNumList(int total){
  // total student number
  // int total = 65;
  // initial each group expect to be "eachGrp" number of people
  int eachGrp = 10;
  // may divide into "grpNum" number of group
  int grpNum = total ~/ eachGrp;
  // vacant list
  var splits = [];
  // find remainder when total number divid into "grpNum" number of group
  int remainder = total % grpNum;
  // number of people in one group by calculation
  int calGrp = total ~/ grpNum;
 
  for (int i = 0; i &lt; grpNum; i++) {
    splits.add(calGrp);
  }
  //print(splits);
 
  for (int i = 0; i &lt; remainder; i++) {
    splits[i] += 1;
  }
  //print(splits);
  return splits;
 }</pre>
<h4>index.html:</h4>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;h1&gt;亂數分組:&lt;/h1&gt;
學員名單 URL: &lt;input type="text" id="studListUrl" size="50" value="https://mde.tw/wcm2020/downloads/2020spring_wcm_1a_list.txt"&gt;&lt;br /&gt;
&lt;input type="submit" value="開始分組" id="submit"&gt;&lt;br /&gt;
&lt;textarea id="output" cols="80" rows="10"&gt;&lt;/textarea&gt;</pre>
<h4>style.css:</h4>
<pre class="brush:css;auto-links:false;toolbar:false" contenteditable="false">body {
  color: white;
  font-size: 20px;
}

input, select, textarea {
font-size: 100%;
}</pre>
<h4>get_student.py</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, request 
from flask_cors import CORS

import requests
import bs4
import ssl

'''
https://s1.mde.nfu.edu.tw:7443/?semester=1082&amp;courseno=0767
cd
2a 1082/0767
2b 1082/0780

2a 1072/0777
2b 1072/0790
2a 1062/0788
2a 1062/0802

wcm
1082/0744

1072/0754
1062/0765

wcmj
1082/2418
'''

app = Flask(__name__)
CORS(app)

@app.route('/studlist')
@app.route('/')
def studlist():
    semester = request.args.get('semester')
    courseno = request.args.get('courseno')
    if semester == None:
        semester = '1082'
    if courseno == None:
        courseno = '0744'
    
    url = 'https://osa.nfu.edu.tw/query/studlist_ajax.php'
    post_var = {'pselyr': semester, 'pseqno': courseno}

    result = requests.post(url, data = post_var)

    soup = bs4.BeautifulSoup(result.content, 'lxml')
    table = soup.find('table', {'class': 'tbcls'})
    data = []
    rows = table.find_all('tr')
    for row in rows:
        cols = row.find_all('td')
        cols = [ele.text.strip() for ele in cols]
        data.append([ele for ele in cols if ele]) # Get rid of empty values
    output = ""
    for i in data[2:]:
        #print(i[0])
        output +=i[0] + "\n"
    return output
    #return  str(pselyr) + " + " +str(pseqno)

# 即使在近端仍希望以 https 模式下執行
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.load_cert_chain('localhost.crt', 'localhost.key')

# 取 flaskapp.py 中的 uwsgi 變數設定
uwsgi = False
if uwsgi:
    # 表示程式在雲端執行
    application = app
else:
    # 表示在近端執行, 以 python3 wsgi.py 執行
    app.run(host='127.0.0.1', port=5443, debug=True, ssl_context=context)
</pre>
<h4>nginx sites-available/default settings:</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">server {
    listen 8000;
    server_name s1.mde.nfu.edu.tw;
    charset utf-8;
    
    listen 7443 ssl;
 
    location /static {
        alias /home/kmol2019/course_studlist/static/;
    }
 
    location / {
        include uwsgi_params;
        uwsgi_pass  127.0.0.1:8087;
    }
    
    ssl_certificate /etc/stunnel/localhost.crt;
    ssl_certificate_key /etc/stunnel/localhost.key;
    ssl_session_timeout 5m;
    ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_prefer_server_ciphers on;
    try_files $uri $uri/ =404;
}</pre>
<h4>uwsgi7.ini</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[uwsgi]
socket = 127.0.0.1:8087
uid = kmol2019
gid = kmol2019
plugins-dir = /usr/lib/uwsgi/plugins/
plugin = python3
master = true
logto = /var/log/uwsgi/emperor.log
logfile-chown = kmol2019:kmol2019
processes = 4
threads = 2
chdir = /home/kmol2019/course_studlist
wsgi-file = /home/kmol2019/course_studlist/get_student.py</pre>
<h4>/etc/systemd/system/cmsimfly.service</h4>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">[Unit]
Description=uWSGI to serve CMSimfly
After=network.target

[Service]
User=kmol2019
Group=kmol2019
WorkingDirectory=/home/kmol2019/uwsgi_ini
ExecStart=/usr/local/bin/uwsgi --emperor /home/kmol2019/uwsgi_ini

[Install]
WantedBy=multi-user.target</pre>
<h2>1a</h2>
<p>wcmg1 組長: 40823131<br/>40823126<br/>40823123<br/>40823124<br/>40823128</p>
<p>wcmg2 組長: 40823112<br/>40823108<br/>40823109<br/>40823111<br/>40823145</p>
<p>wcmg3 組長: 40823125<br/>40823129<br/>40823137<br/>40823136<br/>40823151</p>
<p>wcmg4 組長: 40823110<br/>40823103<br/>40823107<br/>40823130<br/>40823142</p>
<p><span>wcmg5 組長: 40823143</span><br/>40823144<br/> 40543118<br/>40823127<br/><br/></p>
<p>HW: 已知選課名單: <a href="http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=0744">http://s1.mde.nfu.edu.tw:8000/?semester=1082&amp;courseno=0744</a></p>
<p>請找出第五組的其他組員學號!!</p><h1>Topics</h1>
<p>Portable programming system: <a href="https://github.com/mdecourse/wcm2020/tree/master/downloads/portable">https://github.com/mdecourse/wcm2020/tree/master/downloads/portable</a></p>
<h4>WCM</h4>
<p style="padding-left: 30px;">Login to your gm email account and download <a href="https://drive.google.com/file/d/1gLb9_6FEv58wVX2uShG_3sgUseFEcH_y/view?usp=sharing">2020wcm_topic_1.pdf</a>.</p>
<p style="padding-left: 60px;">What is a content management system?</p>
<p style="padding-left: 60px;">Analyzing your information life cycle.</p>
<p style="padding-left: 60px;">Overview of enterprise content management.</p>
<h4><span>Git</span></h4>
<p style="padding-left: 30px;"><span>Login to your gm email account and download <a href="https://drive.google.com/file/d/1YkLWsDVRlScSuSBQv2Aa1JSjvbydJli-/view?usp=sharing">IntroductionToVersionControlAndGit.pdf</a>.</span></p>
<p style="padding-left: 60px;"><span>What is version control?</span></p>
<p style="padding-left: 60px;"><span>Git installation and setup.</span></p>
<p style="padding-left: 60px;"><span>Git getting started.</span></p>
<p style="padding-left: 60px;"><span>Commits and remote git.</span></p>
<h4><span>Github</span></h4>
<p style="padding-left: 30px;"><span>Login to your gm email account and download <a href="https://drive.google.com/file/d/1vnkDLW1cg8hKEMUdjDstvWqiS4R1n3IC/view?usp=sharing">GithubPrimer.pdf</a></span></p>
<p style="padding-left: 30px;"><span>Login to your gm email account and download <a href="https://drive.google.com/file/d/18MiM_d95ustohAqoUfx-gc-2dUE9Av0n/view?usp=sharing">ConflictsGUIToolAdvGit.pdf</a></span></p>
<h4><span>Python and Flask</span></h4>
<p style="padding-left: 30px;"><span>Login to your gm email account and download <a href="https://drive.google.com/file/d/17_LCSvwgtnIG8FnpezfUlEdbo3Y6G6CP/view?usp=sharing">2019_ABeginnersGuideToPython3Programming.pdf</a></span></p>
<p style="padding-left: 30px;"><span>Login to your gm email account and download <a href="https://drive.google.com/file/d/1u3PHIbGWz3r4bct_molJg8FODkS8tf02/view?usp=sharing">2019_BuildingRESTAPIsWithFlask.pdf</a></span></p>
<p style="padding-left: 30px;"><span><a href="https://github.com/mstamy2/PyPDF2">https://github.com/mstamy2/PyPDF2</a></span></p>
<h4><span>Dart and Flutter</span></h4>
<p style="padding-left: 30px;"><span>Login to your gm email account and download<span><span> <a href="https://drive.google.com/file/d/1kN0ggmdO8d3oKqT11MRnPtJaKhC5g22t/view?usp=sharing">2020_ QuickStartGuideToDartProgramming.pdf</a></span></span></span></p>
<p style="padding-left: 30px;"><span><span><span>Login to your gm email account and download<span><span><span> <a href="https://drive.google.com/file/d/1RyCFxXrh0skRAWafX7nyYFVHuMO68iTS/view?usp=sharing">2019_BeginningAppDevelopmentWithFlutter.pdf</a></span></span></span></span></span></span></p>
<h2>W6-W9</h2>
<p>Google 因 COVID-19 疫情蔓延, 因此允許教育版的 Ｇ Suite 可以在 2020.9 月前免費使用 Meet 中的線上錄影與 live stream 功能.</p>
<p>而 Youtube Live 目前可以免費從 OBS 串流連接後直播, Ｍeet 的會議錄影將 mp4 存入發起開會者的 Google Drive, 而 Youtube live stream 則將影片存入使用者 channel 中的直播影片區.</p>
<h4>Google Handout Meet</h4>
<p style="padding-left: 30px;"><a href="https://meet.google.com">https://meet.google.com</a> </p>
<h4><a href="https://support.google.com/youtube/answer/2474026?hl=en">Youtube Streaming</a> + <a href="https://portableapps.com/apps/music_video/obs-studio-portable">Portable OBS</a></h4>
<h4>現場直播的 audio 錄音設定</h4>
<p>在電腦輔助設計室進行直播時, 由於現場有擴音設備, 因此採用 OBS 串流至 Youtube 的最佳收音並非從 Webcam 的麥克風, 而是從擴音器以 audio output 連接到電腦的麥克風插槽, 然後將 OBS 的 audio 設定為從電腦的麥克風收音.</p>
<h4>W6</h4>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/bt0e_6hFr9w" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Fl_QQnKHu50" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/KbjR9PEHq5k" width="560"></iframe></p>
<h4>W7</h4>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/-uO4voHm0xM" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/vC5jptFUmpI" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/7axdQYkRDHY" width="560"></iframe></p>
<h4>W8</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1wYudC9_GmYNGPKOZdjFPOjf4-wRjbnTD">wcm w8 第一段錄影</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1g7aZExbXcNQndsqszeXG2wHflhPWrspk">wcm w8 第二段錄影</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/open?id=1uwFqkY_LJs2HdhVDOJyyIKc-3QdseJuu">wcm w8 第三段錄影</a></p>
<h4>W9</h4>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1UFvoiCHVGLdyc8t4yvsaHF1PaU0evipH/view?usp=sharing">wcm w9 直播錄影</a></p>
<h2>W10-W11</h2>
<h4>W10</h4>
<p style="padding-left: 30px;">說明如何利用 Python 程式讀取學員修課檔案, 以及從 Google Sheet 轉出的 .csv, 分別處理為 List 與 Dictionary 資料格式之後, 逐一根據學員 List 學號, 從 Dictionary 取出自評成績.</p>
<p style="padding-left: 60px;"><a href="https://drive.google.com/file/d/1JtzoMv7_k307l2ZXgJExKU7z5cwvnGPu/view?usp=sharing">wcm w10-1</a></p>
<p style="padding-left: 60px;"><a href="https://drive.google.com/file/d/1Djm5Vmmw_QcIVx9RWCuy4eCGGaWW3zHi/view?usp=sharing">wcm w10-2</a></p>
<p style="padding-left: 60px;"><a href="https://drive.google.com/file/d/1ZeA4goQj55QT8igdd7_J6kOqZTTGXzW_/view?usp=sharing">wcm w10-3</a></p>
<p style="padding-left: 60px;">參考程式:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import csv

# read student list

filename = 'E:/wcm2020/data/tmp/2020_spring_score/2a/2a_list.txt'
with open(filename, encoding="utf-8") as f:
    content = f.readlines()
#print(content)
student = [x.strip() for x in content] 
#print(student)


# Timestamp, email, 修課名稱, url, score, desp, memo
# 0, 1, 2, 3, 4, 5, 6
#total = 0
all = {}
with open('y:/2020midterm.csv', encoding="utf-8") as csv_file:
    csv_reader = csv.reader(csv_file, delimiter=',')
    #print(csv_reader)

    line_count = 0
    for row in csv_reader:
        if line_count == 0:
            #print(f'Column names are {", ".join(row)}')
            line_count += 1
        else:
            student_num = row[1].split("@")[0]
            #print(student_num)
            student_score = row[4]
            #print(student_score)
            try:
                all.update({student_num: student_score})
            except:
                all.update({student_num: "error"})
            #print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
            #print(f'\t{row[4]}')
            #total += int(row[4])
            line_count += 1
#print(all)
#print(student)


for i in student:
    
    #if i in all:
        #pass
    #else:
        #print(str(i))
    
    try:
        print(i + "\t" + all[i])
    except:
        print(i + "\t60")

    #print(f'Processed {line_count} lines.')
    #print("平均=" + str(total/line_count))
</pre>
<hr/>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1-rUis6vnks-IaKvsKJqPjqfr4rRIX8S9/view?usp=sharing">wcm_w10-4</a></p>
<h4 style="padding-left: 30px;">flask 程式一:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask
 
app = Flask(__name__)
 
@app.route('/') 
def hello_world():
    return 'Hello, From Flask!'
 
if __name__== '__main__': 
    app.run()</pre>
<p style="padding-left: 30px;">Flask 程式二:</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from flask import Flask, render_template
import ssl
import csv
 
context = ssl.SSLContext(ssl.PROTOCOL_TLSv1_2)
context.load_cert_chain('localhost.crt', 'localhost.key')
 
app = Flask(__name__)
 
@app.route('/') 
def hello_world():
    return 'Hello, From Flask!'
 
@app.route('/ROCflag')
def drawROC():
    return render_template("ROCflag.html")

@app.route("/midterm")
def midterm():
    # read student list

    filename = '1a_list.txt'
    with open(filename, encoding="utf-8") as f:
        content = f.readlines()
    #print(content)
    student = [x.strip() for x in content] 
    #print(student)


    # Timestamp, email, 修課名稱, url, score, desp, memo
    # 0, 1, 2, 3, 4, 5, 6
    #total = 0
    all = {}
    with open('2020midterm.csv', encoding="utf-8") as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        #print(csv_reader)

        line_count = 0
        for row in csv_reader:
            if line_count == 0:
                #print(f'Column names are {", ".join(row)}')
                line_count += 1
            else:
                student_num = row[1].split("@")[0]
                #print(student_num)
                student_score = row[3]
                #print(student_score)
                try:
                    all.update({student_num: student_score})
                except:
                    all.update({student_num: "error"})
                #print(f'\t{row[0]} works in the {row[1]} department, and was born in {row[2]}.')
                #print(f'\t{row[4]}')
                #total += int(row[4])
                line_count += 1
    #print(all)
    #print(student)

    output = ""
    for i in student:
        
        #if i in all:
            #pass
        #else:
            #print(str(i))
        
        try:
            output += (str(i) + ": &lt;a href='" + str(all[i]) + "'&gt;"+ str(all[i]) + "&lt;/a&gt;&lt;br /&gt;")
        except:
            output += (str(i) + ": no data&lt;br/&gt;")
        
    return output
     
if __name__== '__main__': 
    app.run(ssl_context=context)</pre>
<p>當使用 git 指令 push 時, Windows 跳出要求使用者登入 github 的帳號與密碼視窗時, 一旦在此視窗輸入帳號與密碼, Windows 會將此帳號密碼登錄在操作系統中. 為了達到使用可攜的目錄, 可以利用下列指令:</p>
<p style="padding-left: 30px;">git config --edit --system </p>
<p>以 vi 編輯器將 credential -&gt; helper 欄位刪除後存檔, 之後 git 便不會再要求 Windows 操作系統代存使用者的相關帳號與密碼.</p>
<h4><span>Python and Flask</span></h4>
<p style="padding-left: 30px;"><span>Login to your gm email account and download <a href="https://drive.google.com/file/d/17_LCSvwgtnIG8FnpezfUlEdbo3Y6G6CP/view?usp=sharing">2019_ABeginnersGuideToPython3Programming.pdf</a></span></p>
<p style="padding-left: 30px;"><span>Login to your gm email account and download <a href="https://drive.google.com/file/d/1u3PHIbGWz3r4bct_molJg8FODkS8tf02/view?usp=sharing">2019_BuildingRESTAPIsWithFlask.pdf</a></span></p>
<p style="padding-left: 30px;"><span><a href="https://github.com/mstamy2/PyPDF2">https://github.com/mstamy2/PyPDF2</a></span></p>
<p style="padding-left: 30px;"><span><a href="https://mde.tw/cd2020pj1">https://mde.tw/cd2020pj1</a> </span></p>
<h4><span>W9</span></h4>
<p style="padding-left: 30px;"><span><a href="https://www.blog.pythonlibrary.org/2018/06/07/an-intro-to-pypdf2/">https://www.blog.pythonlibrary.org/2018/06/07/an-intro-to-pypdf2/</a> <br/></span></p>
<p style="padding-left: 30px;"><span><a href="https://github.com/topics/pypdf2">https://github.com/topics/pypdf2</a> <br/></span></p>
<p style="padding-left: 30px;"><span><a href="https://flask.palletsprojects.com/en/1.1.x/patterns/fileuploads/">https://flask.palletsprojects.com/en/1.1.x/patterns/fileuploads/</a> <br/></span></p>
<p style="padding-left: 30px;"><span><a href="https://www.google.com/search?q=flask+sqlite">Flask 與 SQLite</a></span></p>
<h4><span>W11</span></h4>
<p style="padding-left: 30px;"><span>簡介網際內容管理與計算機程式及電腦輔助設計與實習課程的關聯性</span></p>
<p style="padding-left: 60px;"><span><a href="https://drive.google.com/file/d/1Upv4E7MQAsPr-wYxzFJyo1gxKWmKsmGz/view?usp=sharing">W11 教學影片-1</a> (登入 @gm 後可以在線觀看)</span></p>
<p style="padding-left: 60px;"><span><a href="https://drive.google.com/file/d/1OPBbza3YqhZ7ObqeD5IBVx6cjeoNcNEj/view?usp=sharing">使用 SSH push github 倉儲改版教學影片</a> (登入 @gm 後可以在線觀看)</span></p>
<p style="padding-left: 30px;"><span>說明如何將網際 Python 放入 Virtualbox 虛擬主機中</span></p>
<p style="padding-left: 60px;"><span><a href="https://drive.google.com/open?id=1AugoZIzC8SlDLqJzRdqAP6cMKQsDr7Oo">Virtualbox Ubuntu 虛擬主機使用教學影片</a> (登入 @gm 後可以在線觀看)</span></p>
<p style="padding-left: 60px;"><a href="https://drive.google.com/open?id=1Ff-mPk9kww_04RxkkiS0lb_2Y9z8Ek1Z">Ubuntu 20.04 wcm2020.ova 下載</a> <span>(登入 @gm 後可以下載)</span></p>
<p style="padding-left: 60px;"><span>虛擬主機 NAT Network port forwarding 設定畫面:</span></p>
<p style="padding-left: 60px;"><span><img alt="" height="269" src="/images/virtualbox_nat_network1.png" width="400"/></span></p>
<p style="padding-left: 60px;"><span><img alt="" height="321" src="/images/virtualbox_nat_network2.png" width="400"/></span></p>
<p style="padding-left: 60px;"><span><img alt="" height="321" src="/images/virtualbox_nat_network3.png" width="400"/></span></p>
<p style="padding-left: 60px;"><span>其中虛擬主機的 IPv4 與 IPv6 網路位址以 ifconfig 指令取得, 或可自行設固定 IP.</span></p>
<h4><span>期末專案</span></h4>
<p style="padding-left: 30px;"><span>目標 : 建立一個網際 PDF 檔案編修服務系統</span></p><h2>W12-W18</h2>
<h4>W12</h4>
<p style="padding-left: 30px;">說明<a href="https://drive.google.com/open?id=1efrb_KABXq1dgkTsR5fYlgU7XrXVAM1p">如何在 Windows 10 中安裝 Ubuntu 20.04 Virtualbox 虛擬主機教學影片</a> (for @gm users only)</p>
<p style="padding-left: 30px;">說明<a href="https://drive.google.com/open?id=14jVRdDNicuRqbej9ZbwVr-AOqA58crhA">期末專案與 cd2020pj1 的關聯教學影片</a> (for @gm users only)</p>
<p style="padding-left: 60px;"><a href="https://github.com/mdecourse/cd2020pj1">cd2020pj1 倉儲</a></p>
<h4>W13</h4>
<p style="padding-left: 30px;">完成 IPv6 實體主機搭建: <a href="http://wcm.kmol.info">http://wcm.kmol.info</a> (IP 為 ~17:2020::1)</p>
<p style="padding-left: 30px;">準備將 <a href="https://github.com/mdecourse/cd2020pj1.git">https://github.com/mdecourse/cd2020pj1.git</a> 進行開機啟動配置.</p>
<p style="padding-left: 30px;">各分組嘗試建立 wcm1.kmol.info ~ wcm4.kmol.info 等實體主機.</p>
<p style="padding-left: 30px;">IP 將分別設為 ~17:2020::2 至 ~<span>17:2020::5</span></p>
<p style="padding-left: 30px;"><span>符號名稱分別為: wcm1.kmol.info ～ wcm4.kmol.info</span></p>
<p style="padding-left: 30px;"><span>安裝 NGINX WWW Server:</span></p>
<p style="padding-left: 60px;"><span>sudo apt install nginx</span></p>
<p style="padding-left: 60px;"><span>nginx 設定檔案位於 /etc/nginx/nginx.conf 可用於配置 CMSiMDE 靜態網頁<br/></span></p>
<p style="padding-left: 60px;"><span>若在純 IPv6 下需要設定 Proxy, 則在 /etc/apt/apt.conf.d 中需要新增 proxy.conf, 內容如下:</span></p>
<p style="padding-left: 60px;"><span>Acquire::http::Proxy "http://[proxy_ip_address]:3128";</span></p>
<h4>W14-W18</h4>
<p style="padding-left: 30px;">各分組除了將 W1-W13 週之上課內容整理至個人及分組的網際內容管理系統之外, 將在虛擬與實體主機上完成網際 PDF 檔案管理系統.</p>
<p></p><h2>MDETools</h2>
<p>這裡提供機械設計工程課程相關的工具下載與安裝步驟說明.</p>
<p><a href="https://drive.google.com/open?id=1KPpXzumzBIvMCovZdBYh0s468uFO277k">SolidWorks 2017 DVD </a>下載 (請登入 ＠gm 帳號後下載)</p>
<p><a href="https://drive.google.com/open?id=1fEZtGVCXp2vtILUZZ8vTTdtYHsbBpf7j">NX12.02 DVD</a> 下載 (請登入 @gm 帳號後下載)</p>
<p><a href="https://drive.google.com/open?id=1sMTT_sFO_83fPaogdJUQ1v7oM9NaEb_M">COMSOL 5.5 DVD</a> 下載 (請登入 @gm 帳號後下載)</p>
<p><a href="https://drive.google.com/open?id=143jFMheM1xjLxhLkSAouThLzj3WUYX6_">Ubuntu 20.04 Virtualbox</a> 下載, 可用於 CMSiMDE, Oauth2 and CoppeliaSim RemoteAPI 開發 (請登入 @gm 帳號後下載)</p>
<p>安裝步驟請根據上課說明進行.</p><h2>Python</h2>
<p><a href="https://www.learnpython.org/">https://www.learnpython.org/</a> </p>
<p>課程評分程式</p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">'''
根據評分表單中的 自評分數, 互評得分, 教師評分, 計算學員課程成績
'''

def diff(自評分數, 互評得分):
    return abs(自評分數 - 互評得分)
    
def max(自評分數, 互評得分):
    if 自評分數 &gt; 互評得分:
        return 自評分數
    else:
        return 互評得分

def 分組比分(自評分數, 互評得分):
    if diff(自評分數, 互評得分) &lt; 5:
        學員得分 = max(自評分數, 互評得分)
    else:
        學員得分 = 互評得分 - diff(自評分數, 互評得分)
    return 學員得分
    
def 全班比分(學員得分, 教師評分):
    if diff(學員得分, 教師評分) &lt; 5:
        學員成績 = max(學員得分, 教師評分)
    else:
        學員成績 = 教師評分 - diff(學員得分, 教師評分)/4
    return 學員成績

def 學員成績(自評分數, 互評得分, 教師評分):
    學員分組得分 = 分組比分(自評分數, 互評得分)
    學員課程成績 = 全班比分(學員分組得分, 教師評分)
    return 學員課程成績
    
print(學員成績(80, 70, 60))
print(學員成績(60, 70, 80))</pre>
<p></p>
<h4>Python 語法</h4>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
<!-- for ggame -->
<script src="/static/jquery-3.3.1.min.js"></script>
<script src="/static/jquery-ui.1.12.1.min.js"></script>
<script src="/static/pixi-3.0.5.min.js"></script>
<script src="/static/buzz-1.2.1.js"></script>
<script src="/static/bs.js"></script>
<!-- Cango 程式庫 -->
<script src="/static/Cango-13v08-min.js"></script>
<script src="/static/CangoAxes-4v01-min.js"></script>
<script src="/static/gearUtils-05.js"></script>
<!-- for Konva 程式庫 -->
<script src="/static/konva.min.js"></script>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/']});
}
</script>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["py_src"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<h4>開始練習 print() 用法, 並著手建立函式</h4>
<p><!-- 印出版次與關鍵字程式 --></p>
<p>
<script type="text/python3">
from browser import document as doc
from browser import html
import ace
# 清除畫布
def clear_bd(ev):
    bd = doc["brython_div"]
    bd.clear()
# Brython 3.3.4 內建的 container 名稱為  'container' 且 turtle 輸出為 svg 必須使用 div 訂定 id
Ace = ace.Editor(editor_id="kw_editor", console_id="kw_console", container_id="kw__container", storage_id="kw_py_src" )
Ace.editor.setValue("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
def helloWorld():
    print("Hello World!")
helloWorld()
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""")
Ace.editor.scrollToRow(0)
Ace.editor.gotoLine(0)
# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run'].bind('click', Ace.run)
doc['kw_show_console'].bind('click', Ace.show_console)
doc['kw_clear_console'].bind('click', Ace.clear_console)
doc['clear_bd'].bind('click', clear_bd)
</script>
</p>
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src', 'kw_filename');" type="submit" value="Save"/></form>
<p><button id="kw_run">Run</button> <button id="kw_show_console">Output</button> <button id="kw_clear_console">清除輸出區</button><button id="clear_bd">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console"></textarea></div>
<div id="brython_div"></div>
<div class="col-md-0" height="1" id="graphics-column" width="1"></div>
<p><!-- ****************************** keyword start -->
<script type="text/python3">
from browser import document as doc
# 導入位於 static 目錄下的 beditor.py 
import beditor
# 利用 beditor.py 中的 editor 類別建立案例, 對應到 kw1
kw1 = beditor.editor("""# 導入 sys 模組
import sys
# 導入 keyword 模組
import keyword
# 利用 sys 模組中的 version_info 印出 Python 版次
print("Python version: ", sys.version_info)
# 利用 keyword 模組中的 kwlist 印出關鍵字
print("Python keywords: ", keyword.kwlist)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "keyword" 的按鈕點按時, 執行 kw1 物件中的 prog 方法
doc["keyword"].bind('click', kw1.prog)
</script>
</p>
<p><!-- ****************************** keyword end --></p>
<p><!-- ***************************** slide ex1 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex1 = beditor.editor("""# 導入 Ex1 原始碼
a = 0
def my_print(n, input_str):
    print("以下將重覆列印 '", input_str + "' " + str(n) + "次")
    for i in range(n):
        print(i, input_str)
my_print(5, "Hello World!")
the_str = "開始學習 Python"
num = input("請輸入要列印的次數!")
my_print(int(num), the_str)
a = a + 1
print("(" + str(a) + ")", "_" * 25)
def myfun():
    yield 1
    yield 2
    yield 3
for i in myfun():
    print(i)
x = iter(myfun())
y = list(myfun())
a = a + 1
print("(" + str(a) + ")", "_" * 25)
print(x.__next__())
print(x.__next__())
print(x.__next__())
print(y)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex1" 的按鈕點按時, 執行 Ex1 物件中的 prog 方法
doc["ex1"].bind('click', Ex1.prog)
</script>
</p>
<p><!-- ***************************** slide ex1 end --></p>
<p><!-- ***************************** slide ex2 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex2 = beditor.editor("""# Python 的內建資料型別
import math
def f():
    print("This is a user-defined function")
    return 42
print("Some basic types in Python:")
print(type(2))           # int
print(type(2.2))         # float
print(type("2.2"))       # str  (string)
print(type(2 < 2.2))     # bool (boolean)
print(type(math))        # module
print(type(math.tan))    # builtin_function_or_method ("function" in Brython)
print(type(f))           # function (user-defined function)
print(type(type(42)))    # type
print("#####################################################")
print("And some other types we will see later in the course...")
print(type(Exception())) # Exception
print(type(range(5)))    # range
print(type([1,2,3]))     # list
print(type((1,2,3)))     # tuple
print(type({1,2}))       # set
print(type({1:42}))      # dict (dictionary or map)
print(type(2+3j))        # complex  (complex number) (we may not see this type)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex2" 的按鈕點按時, 執行 Ex2 物件中的 prog 方法
doc["ex2"].bind('click', Ex2.prog)
</script>
</p>
<p><!-- ***************************** slide ex2 end --></p>
<p><!-- ***************************** slide ex3 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex3 = beditor.editor("""# Python 的內建常數與函式
# 內建常數
print("Some builtin constants:")
print(True)
print(False)
print(None)
print("And some more constants in the math module:")
import math
print(math.pi)
print(math.e)
# 內建函式
print("Type conversion functions:")
print(bool(0))   # convert to boolean (True or False)
print(float(42)) # convert to a floating point number
print(int(2.8))  # convert to an integer (int)
print("And some basic math functions:")
print(abs(-5))   # absolute value
print(max(2,3))  # return the max value
print(min(2,3))  # return the min value
print(pow(2,3))  # raise to the given power (pow(x,y) == x**y)
print(round(2.354, 1)) # round with the given number of digits
# other examples
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Type Affect Semantics
print(3 * 2)
print(3 * "abc")
print(3 + 2)
print("abc" + "def")
print(3 + "def")
# Integer Division
print("The / operator does 'normal' float division:")
print(" 5/3  =", ( 5/3))
print()
print("The // operator does integer division:")
print(" 5//3 =", ( 5//3))
print(" 2//3 =", ( 2//3))
print("-1//3 =", (-1//3))
print("-4//3 =", (-4//3))
# Modulus or Remainder Operator (%)
print(" 6%3 =", ( 6%3))
print(" 5%3 =", ( 5%3))
print(" 2%3 =", ( 2%3))
print(" 0%3 =", ( 0%3))
print("-4%3 =", (-4%3))
print(" 3%0 =", ( 3%0))
# Verify that (a%b) is equivalent to (a-(a//b)*b)
def mod(a, b):
  return a - (a//b)*b
print(41%14, mod(41,14))
print(14%41, mod(14,41))
print(-32%9, mod(-32,9))
print(32%-9, mod(32,-9))
# Operator Order (Precedence and Associativity)
print("Precedence:")
print(2+3*4)  # prints 14, not 20
print(5+4%3)  # prints  6, not 0 (% has same precedence as *, /, and //)
print(2**3*4) # prints 32, not 4096 (** has higher precedence than *, /, //, and %)
print()
print("Associativity:")
print(5-4-3)   # prints -2, not 4 (- associates left-to-right)
print(4**3**2) # prints 262144, not 4096 (** associates right-to-left)
# Approximate Values of Floating-Point Numbers
print(0.1 + 0.1 == 0.2)        # True, but...
print(0.1 + 0.1 + 0.1 == 0.3)  # False!
print(0.1 + 0.1 + 0.1)         # prints 0.30000000000000004 (uh oh)
print((0.1 + 0.1 + 0.1) - 0.3) # prints 5.55111512313e-17 (tiny, but non-zero!)
# Equality Testing with math.isclose
print("The problem....")
d1 = 0.1 + 0.1 + 0.1
d2 = 0.3
print(d1 == d2)                # False (never use == with floats!)
print()
print("The solution...")
import math
print(math.isclose(d1, d2))  # True!
# math.isclose checks if the two numbers are ALMOST equal, within a small error
# Short-Circuit Evaluation
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(no() and crash()) # Works!
print(crash() and no()) # Crashes!
print (yes() and crash()) # Never runs (due to crash), but would also crash (without short-circuiting)
# Or operator
def yes():
    return True
def no():
    return False
def crash():
    return 1/0 # crashes!
print(yes() or crash()) # Works!
print(crash() or yes()) # Crashes!
print(no() or crash())  # Never runs (due to crash), but would also crash (without short-circuiting)
# more examples
def isPositive(n):
    result = (n > 0)
    print("isPositive(",n,") =", result)
    return result
def isEven(n):
    result = (n % 2 == 0)
    print("isEven(",n,") =", result)
    return result
print("Test 1: isEven(-4) and isPositive(-4))")
print(isEven(-4) and isPositive(-4)) # Calls both functions
print("----------")
print("Test 2: isEven(-3) and isPositive(-3)")
print(isEven(-3) and isPositive(-3)) # Calls only one function!
# type vs isinstance
# Both type and isinstance can be used to type-check
# In general, (isinstance(x, T)) will be more robust than (type(x) == T)
print(type("abc") == str)
print(isinstance("abc", str))
# We'll see better reasons for this when we cover OOP + inheritance later
# in the course.  For now, here is one reason:  say you wanted to check
# if a value is any kind of number (int, float, complex, etc). 
# You could do:
def isNumber(x):
    return ((type(x) == int) or
            (type(x) == float)) # are we sure this is ALL kinds of numbers?
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
# But this is cleaner, and works for all kinds of numbers, including
# complex numbers for example:
import numbers
def isNumber(x):
    return isinstance(x, numbers.Number) # works for any kind of number
print(isNumber(1), isNumber(1.1), isNumber(1+2j), isNumber("wow"))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex3" 的按鈕點按時, 執行 Ex3 物件中的 prog 方法
doc["ex3"].bind('click', Ex3.prog)
</script>
</p>
<p><!-- ***************************** slide ex3 end --></p>
<p><!-- ***************************** slide ex4 start --></p>
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ex4 = beditor.editor("""# Python 函式
# Vocabulary
x = 5
def f(y, z):
    result = x + y + z
    return result
print(f(1, 2)) # 8
print(f(3, 4)) # 12
# Vocabulary:
#   variables: global vs. local
#   statements vs. expressions
#   function definitions vs. function calls
#   parameters vs. arguments
# Return Statements
# Basic example
def isPositive(x):
    return (x > 0)
print(isPositive(5))  # True
print(isPositive(-5)) # False
print(isPositive(0))  # False
# Return ends the function immediately
def isPositive(x):
    print("Hello!")   # runs
    return (x > 0)
    print("Goodbye!") # does not run ("dead code")
print(isPositive(5))  # prints Hello, then True
# No return statement --> return None
def f(x):
    x + 42
print(f(5)) # None
def f2(x):
    result = x + 42
print(f2(5)) # None
# Print versus Return
# This is a common early mistake (confusing print and return):
def cubed(x):
    print(x**3) # Here is the error!
cubed(2)          # seems to work!
print(cubed(3))   # sort of works (but prints None, which is weird)
print(2*cubed(4)) # Error!
# Once again (correctly)
def cubed2(x):
    return (x**3) # That's better!
cubed2(2)          # seems to be ignored (why?)
print(cubed2(3))   # works!
print(2*cubed2(4)) # works!
# Different Parameter and Return Types
def hypotenuse(a, b):
    return ((a**2) + (b**2))**0.5
print(hypotenuse(3, 4)) # 5.0 (not 5)
print("---------------------")
def xor(b1, b2):
    return ((b1 and (not b2)) or (b2 and (not b1)))  # same as (b1 != b2)
print(xor(True,  True))  # False
print(xor(True,  False)) # True
print(xor(False, True))  # True
print(xor(False, False)) # False
print("---------------------")
def isPositive(n):
    return (n > 0)
print(isPositive(10))     # True
print(isPositive(-1.234)) # False
# Function Composition
def f(w):
    return 10*w
def g(x, y):
    return f(3*x) + y
def h(z):
    return f(g(z, f(z+1)))
print(h(1)) # hint: try the "visualize" feature
# Helper Functions 
def onesDigit(n):
    return n%10
def largerOnesDigit(x, y):
    return max(onesDigit(x), onesDigit(y))
print(largerOnesDigit(134, 672)) # 4
print(largerOnesDigit(132, 674)) # Still 4
# Test Functions
# A broken test function
def onesDigit(n):
    return n%10
def testOnesDigit():
    print("Testing onesDigit()...", end="")
    assert(onesDigit(5) == 5)
    assert(onesDigit(123) == 3)
    assert(onesDigit(100) == 0)
    assert(onesDigit(999) == 9)
    print("Passed!")
testOnesDigit() # Passed!  Why is this bad?
# A better version
def onesDigit2(n):
    return n%10
def testOnesDigit2():
    print("Testing onesDigit()...", end="")
    assert(onesDigit2(5) == 5)
    assert(onesDigit2(123) == 3)
    assert(onesDigit2(100) == 0)
    assert(onesDigit2(999) == 9)
    assert(onesDigit2(-123) == 3) # Added this test
    print("Passed!")
testOnesDigit2() # Crashed!  So the test function worked!
# Local Variable Scope
def f(x):
    print("In f, x =", x)
    x += 5
    return x
def g(x):
    return f(x*2) + f(x*3)
print(g(2))
# Another example
def f(x):
    print("In f, x =", x)
    x += 7
    return round(x / 3)
def g(x):
    x *= 10
    return 2 * f(x)
def h(x):
    x += 3
    return f(x+4) + g(x)
print(h(f(1)))
# Global Variable Scope
# In general, you should avoid using global variables.
# You will even lose style points if you use them!
# Still, you need to understand how they work, since others
# will use them, and there may also be some very few occasions
# where you should use them, too!
g = 100
def f(x):
    return x + g
print(f(5)) # 105
print(f(6)) # 106
print(g)    # 100
# Another exampl
g = 100
def f(x):
    # If we modify a global variable, we must declare it as global.
    # Otherwise, Python will assume it is a local variable.
    global g
    g += 1
    return x + g
print(f(5)) # 106
print(f(6)) # 108
print(g)    # 102
# Default arguments
# Sometimes, a function has a parameter that has a natural default
# We can specify that default value in the function definition,
# then choose whether or not to include it in the function call.
def f(x, y=10):
    return x + y
print(f(5))   # 15
print(f(5,1)) # 6
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ex4" 的按鈕點按時, 執行 Ex4 物件中的 prog 方法
doc["ex4"].bind('click', Ex4.prog)
</script>
</p>
<p><!-- ***************************** slide ex4 end --></p>
<!-- line drawing start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Draw = beditor.editor("""# Line drawing
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.id = "line_drawing"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["line_drawing"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
# 設定填圖顏色
ctx.fillStyle = "rgb(200,0,0)"
# 設定畫筆顏色
ctx.strokeStyle = "rgb(0,0,200)"
# 乘上 deg 可轉為徑度單位
deg = math.pi / 180
# 建立多邊形定點位置畫線函式
def star(radius, xc, yc, n):
    #radius = 100
    #xc = 200
    #yc = 200
    xi = xc + radius*math.cos((360/n)*deg+90*deg)
    yi = yc - radius*math.sin((360/n)*deg+90*deg)
    ctx.beginPath()
    ctx.moveTo(xi,yi)
    for i in range(2, n+1):
        x = xc + radius*math.cos((360/n)*deg*i+90*deg)
        y = yc - radius*math.sin((360/n)*deg*i+90*deg)
        ctx.lineTo(x,y)
# 以下利用多邊形畫線函式呼叫執行畫框線或填入顏色
# 畫五邊形框線
star(50, 50, 50, 5)
ctx.closePath()
ctx.stroke()
    
# 填三角形色塊
star(50, 150, 50, 3)
ctx.closePath()
ctx.fill()
    
# 改變畫線顏色後, 畫七邊形框線
ctx.strokeStyle = "rgb(0,200,20)"
star(50, 250, 50, 7)
ctx.closePath()
ctx.stroke()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "draw" 的按鈕點按時, 執行 Draw 物件中的 prog 方法
doc["draw"].bind('click', Draw.prog)
</script>
</p>
<!-- line drawing ends -->
<p></p>
<!-- flag ex start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Flag = beditor.editor("""# 畫中華民國國旗
# 導入 doc
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 300, height = 200)
canvas.style = {"width": "100%"}
canvas.id = "taiwan_flag"
brython_div = doc["brython_div"]
brython_div <= canvas
# 準備繪圖畫布
canvas = doc["taiwan_flag"]
ctx = canvas.getContext("2d")
# 進行座標轉換, x 軸不變, y 軸反向且移動 canvas.height 單位光點
# ctx.setTransform(1, 0, 0, -1, 0, canvas.height)
# 以下採用 canvas 原始座標繪圖
flag_w = canvas.width
flag_h = canvas.height
circle_x = flag_w/4
circle_y = flag_h/4
# 先畫滿地紅
ctx.fillStyle='rgb(255, 0, 0)'
ctx.fillRect(0,0,flag_w,flag_h)
# 再畫青天
ctx.fillStyle='rgb(0, 0, 150)'
ctx.fillRect(0,0,flag_w/2,flag_h/2)
# 畫十二道光芒白日
ctx.beginPath()
star_radius = flag_w/8
angle = 0
for i in range(24):
    angle += 5*math.pi*2/12
    toX = circle_x + math.cos(angle)*star_radius
    toY = circle_y + math.sin(angle)*star_radius
    # 只有 i 為 0 時移動到 toX, toY, 其餘都進行 lineTo
    if (i):
        ctx.lineTo(toX, toY)
    else:
        ctx.moveTo(toX, toY)
ctx.closePath()
# 將填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
# 白日:藍圈
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w*17/240, 0, math.pi*2, True)
ctx.closePath()
# 填色設為藍色
ctx.fillStyle = 'rgb(0, 0, 149)'
ctx.fill()
# 白日:白心
ctx.beginPath()
ctx.arc(circle_x, circle_y, flag_w/16, 0, math.pi*2, True)
ctx.closePath()
# 填色設為白色
ctx.fillStyle = '#fff'
ctx.fill()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "flag" 的按鈕點按時, 執行 Flag 物件中的 prog 方法
doc["flag"].bind('click', Flag.prog)
</script>
</p>
<!-- flag ex ends -->
<p></p>
<!-- bunny start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bunny = beditor.editor("""# Ggame
from ggame import App, ImageAsset, Sprite, MouseEvent
from random import random, randint
from browser import document as doc
from browser import html
import math
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas
class Bunny(Sprite):
    
    asset = ImageAsset("/images/bunny.png")
    
    def __init__(self, position):
        super().__init__(Bunny.asset, position)
        # register mouse events
        App.listenMouseEvent(MouseEvent.mousedown, self.mousedown)
        App.listenMouseEvent(MouseEvent.mouseup, self.mouseup)
        App.listenMouseEvent(MouseEvent.mousemove, self.mousemove)
        self.dragging = True
        self.deltax = 0
        self.deltay = 0
    
    def step(self):
        # Every now and then a bunny hops...
        if random() < 0.01:
            self.x += randint(-20,20)
            self.y += randint(-20,20)
        
        
    def mousedown(self, event):
        # capture any mouse down within 50 pixels
        self.deltax = event.x - (self.x + self.width//2) 
        self.deltay = event.y - (self.y + self.height//2)
        if abs(self.deltax) < 50 and abs(self.deltay) < 50:
            self.dragging = True
            # only drag one bunny at a time - consume the event
            event.consumed = True
            
    def mousemove(self, event):
        if self.dragging:
            self.x = event.x - self.deltax - self.width//2
            self.y = event.y - self.deltay - self.height//2
            event.consumed = True
            
    def mouseup(self, event):
        if self.dragging:
            self.dragging = False
            event.consumed = True
            
        
class DemoApp(App):
    
    def __init__(self):
        super().__init__()
        for i in range(5):
            Bunny((randint(50, 600), randint(50, 400)))
        
    def step(self):
        # Override step to perform action on each frame update
        for bunny in self.spritelist:
            bunny.step()
# Create the app
app = DemoApp()  
# Run the app
app.run()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bunny" 的按鈕點按時, 執行 Bunny 物件中的 prog 方法
doc["bunny"].bind('click', Bunny.prog)
</script>
</p>
<!-- bunny ends -->
<p></p>
<!-- clear canvas start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Clear = beditor.editor("""# 清除畫布
from browser import document, html
brython_div = document["brython_div"] 
brython_div.clear()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "clear" 的按鈕點按時, 執行 Clear 物件中的 prog 方法
doc["clear"].bind('click', Clear.prog)
</script>
</p>
<!-- clear canvas ends -->
<p></p>
<!-- cango spur gears start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Spur = beditor.editor("""# Cango Spur Gears
from browser import document as doc
from browser import html
import math
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "cango_gear"
brython_div = doc["brython_div"]
brython_div <= canvas
from browser import document as doc
from browser import window
import math
canvas = doc["cango_gear"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
cango = window.Cango.new
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
shape = window.Shape.new
path = window.Path.new
creategeartooth = window.createGearTooth.new
tweener = window.Tweener.new
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="cango_gear" 的 canvas 上
cgo = cango("cango_gear")
######################################
# 畫正齒輪輪廓
#####################################
def cangoGear(n, m, pa):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
    gearTooth = path(data, {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        gear.appendPath(newTooth)
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = path(shapedefs.circle(hr), {
      "fillColor":"#ddd0dd",
      "border": True,
      "strokeColor": "#606060" })
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    return gear
# 設定兩齒齒數
n1 = 17
n2 = 11
n3 = 13
reduced_ratio = 0.5
# 使用 80% 的畫布寬度
m = 0.8*canvas.width/((n1+n2+n3)*reduced_ratio)
# 設定共同的壓力角
pa = 25
# n 齒輪的節圓半徑
pr1 = n1*m/2
# n2 齒輪的節圓半徑
pr2 = n2*m/2
pr3 = n3*m/2
cx = canvas.width/2
cy = canvas.height/2
# 建立 gears
gear1 = cangoGear(n1, m, pa)
gear2 = cangoGear(n2, m, pa)
gear3 = cangoGear(n3, m, pa)
from browser.timer import set_interval
deg = math.pi/180
rotate_speed = 12*deg
def draw():
    cgo.clearCanvas()
    gear1.transform.translate(cx-(pr1+pr2)*reduced_ratio, cy)
    gear1.transform.scale(reduced_ratio)
    gear1.transform.rotate(0)
    gear1.rotate(rotate_speed)
    cgo.render(gear1)
    
    gear2.transform.translate(cx, cy)
    gear2.transform.scale(reduced_ratio)
    gear2.transform.rotate(180+(360/n2/2))
    gear2.rotate(-(rotate_speed)*n1/n2)
    cgo.render(gear2)
    
    gear3.transform.translate(cx+(pr2+pr3)*reduced_ratio, cy)
    gear3.transform.scale(reduced_ratio)
    gear3.transform.rotate(180+(360/n3/2)+(180+(360/n2/2))*n2/n3)
    gear3.rotate((rotate_speed*n1/n2)*(n2/n3))
    cgo.render(gear3)
set_interval(draw, 2)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "spur" 的按鈕點按時, 執行 Spur 物件中的 prog 方法
doc["spur"].bind('click', Spur.prog)
</script>
</p>
<!-- cango spur gears ends -->
<p></p>
<!-- temp convert start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Temp = beditor.editor("""# Temperature Conversion
# Temperature Conversion
'''
C to F: Celsius to Fahrenheit Conversion Formula. To convert temperatures in degrees Celsius to Fahrenheit, multiply by 1.8 (or 9/5) and add 32.
To convert temperatures in degrees Fahrenheit to Celsius, subtract 32 and multiply by .5556 (or 5/9).
Fahrenheit = Celsius*9/5 + 32
Celsium = (Fahrenheit - 32)*5/9
'''
from browser import document, html
brython_div = document["brython_div"]
def c2f(c):
    f = round(c*9/5 + 32, 3)
    return "Celsiusc: "+ str(c) +         " degrees = Fahrenheit: " + str(f) + " degrees"
    
def f2c(f):
    c = round((f - 32)*5/9, 3)
    return "Fahrenheit: "+ str(f) +         " degrees = Celsiusc: " + str(c) + " degrees"
    
choice = input("c2f or f2c")
if choice == "c2f":
    '''
    c = float(input("input Celsius in degrees"))
    print(c2f(c))
    '''
    for deg in range(100):
        brython_div <= c2f(deg)
        brython_div <= html.BR()
else:
    '''
    f = float(input("input Fahrenheit in degrees"))
    print(f2c(f))
    '''
    for deg in range(100):
        brython_div <= f2c(deg)
        brython_div <= html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "temp" 的按鈕點按時, 執行 Temp 物件中的 prog 方法
doc["temp"].bind('click', Temp.prog)
</script>
</p>
<!-- temp convert ends -->
<p></p>
<!-- forloop start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Forloop = beditor.editor("""# For loop
for i in range(5):
    print(i)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "forloop" 的按鈕點按時, 執行 Forloop 物件中的 prog 方法
doc["forloop"].bind('click', Forloop.prog)
</script>
</p>
<!-- forloop ends -->
<p></p>
<!-- guess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Guess = beditor.editor("""# 猜數字遊戲
from browser import document, html, alert
import random
# 跳出文字說明視窗
alert("開始玩猜數字遊戲")
# 利用 random 模組中的 randint 取 1~100 間的亂數
標準答案 = random.randint(1, 100)
# 利用 input 函式視窗, 取使用者所猜的數字, 轉為整數
你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
# 猜測次數起始值設為 1
猜測次數 = 1
# 進入重複迴圈, 直到猜對數字
while 標準答案 != 你猜的數字:
    # 根據使用者所猜的數字, 與答案比較後, 給出提示
    if 標準答案 < 你猜的數字:
        alert("猜第" + str(猜測次數) + "次, 太大了，再猜 :)加油")
    else:
        alert("猜第" + str(猜測次數) + "次, 太小了，再猜 :)加油")
    你猜的數字 = int(input("請輸入您所猜 1~100 間的整數:"))
    # 猜測次數累加
    猜測次數 += 1
# 跳出迴圈表示猜對, 給出最後文字說明視窗
alert("猜對了！答案為" + str(標準答案) + ", 總共猜了" + str(猜測次數) + "次")
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "guess" 的按鈕點按時, 執行 Guess 物件中的 prog 方法
doc["guess"].bind('click', Guess.prog)
</script>
</p>
<!-- guess ends -->
<p></p>
<!-- autoguess start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Autoguess = beditor.editor("""# 程式自動猜數字遊戲
from browser import document, html, alert
import random
 
id4 = document["brython_div"]
執行次數 = 100
總猜測次數 = 0
for i in range(執行次數):
    id4 <= "第" + str(i+1) + "次玩:" + html.BR()
    下限 = 1
    上限 = 100
    標準答案 = random.randint(下限, 上限)
    pc猜的數字 = random.randint(下限, 上限)
    #print(標準答案, pc猜的數字)
    #integer int()
    #string str()
    #float float()
    #你猜的數字 = int(input("請輸入您所猜的整數:"))
    猜測次數 = 1
    while 標準答案 != pc猜的數字:
        if 標準答案 < pc猜的數字:
            #print("太大了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 - 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太大了!" + html.BR()
            上限 = pc猜的數字 - 1
        else:
            #print("太小了，再猜一次 :)加油")
            # 因此已經確定"pc猜的數字"不是答案, 因此 + 1
            id4 <= "電腦猜的數字:" + str(pc猜的數字) + " 太小了!" + html.BR()
            下限 = pc猜的數字 + 1
        #pc猜的數字 = int(input("請輸入您所猜的整數:"))
        pc猜的數字 = random.randint(下限, 上限)
        猜測次數 += 1
    #print("猜對了！總共猜了", 猜測次數, "次")
    id4 <= "電腦猜對了, 答案為: " + str(標準答案) + ", 總共猜了 "+ str(猜測次數) + "次" + html.BR()
    總猜測次數 += 猜測次數
平均猜測次數 = int(總猜測次數/執行次數)
#print("平均次數", 平均猜測次數)
id4 <= "平均次數: " + str(平均猜測次數)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "autoguess" 的按鈕點按時, 執行 Autoguess 物件中的 prog 方法
doc["autoguess"].bind('click', Autoguess.prog)
</script>
</p>
<!-- autoguess ends -->
<p></p>
<!-- lottery start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Lottery = beditor.editor("""# 大樂透電腦選號
# lottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
except:
    alert("請輸入要選擇大樂透電腦選號數量的'整數'")
    total = int(input("請問要出幾張大樂透彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生 1 到 49 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    numbers = random.sample(list(range(1, 49)), 6)
    output_div <= str(i) + ". 電腦選號為: " + str(numbers) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["lottery"].bind('click', Lottery.prog)
</script>
</p>
<!-- lottery ends -->
<p></p>
<!-- 台灣威力彩 start -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Weleadlottery = beditor.editor("""# 威力彩電腦選號
# weleadlottery
from browser import document, html, alert
import random
try:
    total = int(input("請問要出幾張威力彩卷號碼?"))
except:
    alert("請輸入要選擇威力彩電腦選號數量的'整數'")
    total = int(input("請問要出幾張威力彩卷號碼?"))
# 準備將電腦選出的號碼, 輸出到內定 id="brython_div" 的標註區域
output_div = document["brython_div"]
output_div <= "以下將出 " + str(total) + " 張威力彩電腦選號彩卷:" + html.BR()
for i in range(1, total + 1):
    # 利用 list(range()) 產生第一區 1 到 38 , 第二區 1 到 8 的 population list
    # 然後再透過 random.sample(population, k) 
    # 從 population, 產生 k 個不同的數字
    section1_numbers = random.sample(list(range(1, 38)), 6)
    section2_number = random.sample(list(range(1, 8)), 1)
    output_div <= str(i) + ". 電腦選號第一區為: " + str(section1_numbers) + html.BR()
    output_div <= ". 電腦選號第二區為: " + str(section2_number) + html.BR()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "lottery" 的按鈕點按時, 執行 Lottery 物件中的 prog 方法
doc["weleadlottery"].bind('click', Weleadlottery.prog)
</script>
</p>
<!-- 台灣威力彩 ends -->
<p></p>
<!-- bezier starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Bezier = beditor.editor("""# Cango Bezier 繪圖
from browser import window, html
from browser import document as doc
canvas = html.CANVAS(width = 600, height = 400)
canvas.id = "canvas"
brython_div = doc["brython_div"]
brython_div <= canvas
# Javascript 物件
cango = window.Cango.new
path = window.Path.new
shape = window.Shape.new
group = window.Group.new
# Javascript 變數
shapedefs = window.shapeDefs
g1 = cango("canvas")
g1.clearCanvas()
g1.gridboxPadding(10, 10, 5, 7)
g1.fillGridbox("lightgreen")
g1.setWorldCoordsRHC(-100, -100, 400)
x1 = 40
y1 = 20
cx1 = 90
cy1 = 120
x2 = 120
y2 = 100
cx2 = 130
cy2 = 20
cx3 = 150
cy3 = 120
x3 = 180
y3 = 60
def dragC1(mousePos):
    global cx1, cy1
    cx1 = mousePos.x
    cy1 = mousePos.y
    drawCurve()
def dragC2(mousePos):
    global cx2, cy2
    cx2 = mousePos.x
    cy2 = mousePos.y
    drawCurve()
def dragC3(mousePos):
    global cx3, cy3
    cx3 = mousePos.x
    cy3 = mousePos.y
    drawCurve()
def drawCurve():
    qbez = path(['M', x1, y1, 'Q', cx1, cy1, x2, y2], {
      'strokeColor':'blue'})
    cbez = path(['M', x2, y2, 'C', cx2, cy2, cx3, cy3, x3, y3], {
      'strokeColor':'green'})
    L1 = path(['M', x1, y1, 'L', cx1, cy1, x2, y2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L2 = path(['M', x2, y2, 'L', cx2, cy2], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    L3 = path(['M', x3, y3, 'L', cx3, cy3], {
      'strokeColor':"rgba(0, 0, 0, 0.2)",
      'dashed':[4]})
    c1.transform.translate(cx1, cy1)
    c2.transform.translate(cx2, cy2)
    c3.transform.translate(cx3, cy3)
    grp = group(qbez, cbez, L1, L2, L3, c1, c2, c3)
    g1.render(grp, True)
g1.clearCanvas("lightyellow")
g1.deleteAllLayers()
g1.setWorldCoordsRHC(0, 0, 200)
c1 = shape(shapedefs.circle(6), {'fillColor':'red'})
c1.enableDrag(None, dragC1, None)
c2 = shape(shapedefs.circle(6), {'fillColor':'red'})
c2.enableDrag(None, dragC2, None)
c3 = shape(shapedefs.circle(6), {'fillColor':'red'})
c3.enableDrag(None, dragC3, None);
drawCurve()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "bezier" 的按鈕點按時, 執行 Bezier 物件中的 prog 方法
doc["bezier"].bind('click', Bezier.prog)
</script>
</p>
<!-- bezier ends -->
<p></p>
<!-- turtle1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle1 = beditor.editor("""# Turtle1 繪圖
from browser import window, html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle()
t.width(5)
for c in ['red', '#00ff00', '#fa0', 'rgb(0,0,200)']:
    t.color(c)
    t.forward(100)
    t.left(90)
# dot() and write() do not require the pen to be down
t.penup()
t.goto(-30, -100)
t.dot(40, 'rgba(255, 0, 0, 0.5')
t.goto(30, -100)
t.dot(40, 'rgba(0, 255, 0, 0.5')
t.goto(0, -70)
t.dot(40, 'rgba(0, 0, 255, 0.5')
t.goto(0, 125)
t.color('purple')
t.write("這就是 Brython, 網頁上的 Python", font=("Arial", 15, "normal"))
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle1" 的按鈕點按時, 執行 Turtle1 物件中的 prog 方法
doc["turtle1"].bind('click', Turtle1.prog)
</script>
</p>
<!-- turtle1 ends -->
<p></p>
<!-- turtle2 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle2 = beditor.editor("""# Turtle2 繪圖
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
star = turtle.Turtle()
for i in range(5):
    star.forward(250)
    star.right(144)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle2" 的按鈕點按時, 執行 Turtle2 物件中的 prog 方法
doc["turtle2"].bind('click', Turtle2.prog)
</script>
</p>
<!-- turtle2 ends -->
<p></p>
<!-- turtle3 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle3 = beditor.editor("""# Turtle3 繪圖
# https://michael0x2a.com/blog/turtle-examples
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
painter = turtle.Turtle()
painter.pencolor("blue")
for i in range(50):
    painter.forward(50)
    painter.left(123) # Let's go counterclockwise this time 
    
painter.pencolor("red")
for i in range(50):
    painter.forward(100)
    painter.left(123)
    
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle3" 的按鈕點按時, 執行 Turtle3 物件中的 prog 方法
doc["turtle3"].bind('click', Turtle3.prog)
</script>
</p>
<!-- turtle3 ends -->
<p></p>
<!-- turtle4 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle4 = beditor.editor("""# Turtle4 繪圖
# https://docs.python.org/3.7/library/turtle.html?highlight=turtle
# https://fiftyexamples.readthedocs.io/en/latest/turtle.html
from browser import document as doc
import turtle
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
# 輸入 "turtle" 字串, 表示要使用內建的烏龜圖示
t = turtle.Turtle("turtle")
# 設定繪圖尺寸
screen_x = 500-20
screen_y = 300
# 提筆, 將烏龜移動到畫布中心
t.penup()
t.home()
# 內定方向為右, 前進 screen_x/2
t.forward(screen_x / 2)
# 將方向往右轉 90 度
t.right(90)
# 此時方向向下, 前進 screen_y/2
t.forward(screen_y / 2)
# 令烏龜方向轉絕對角度 180, 等同轉相對角度 90 度, 即 t.right(90)
t.setheading(180)
# 將畫筆顏色設為紅色
t.pencolor('red')
# 下筆準備繪圖
t.pendown()
# 設筆寬度為 10
t.pensize(10)
# 進入重複迴圈, 此時方向向右, 分別
# 前進 screen_x, 之後轉 90 度, 方向朝上
# 再前進 screen_y, 之後再轉 90 度, 方向朝右
# 再前進 screen_x, 之後轉 90 度, 方向朝下
# 最後再前進 screen_y 後, 將方向轉為向左
for distance in (screen_x, screen_y, screen_x, screen_y):
    t.forward(distance)
    t.right(90)
# 提筆後, 將烏龜轉回內定方向回到畫布中心
t.penup()
t.home()
# 完成 turtle 繪圖
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle4" 的按鈕點按時, 執行 Turtle4 物件中的 prog 方法
doc["turtle4"].bind('click', Turtle4.prog)
</script>
</p>
<!-- turtle4 ends -->
<p></p>
<!-- turtle5 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle5 = beditor.editor("""# Turtle5 繪圖
# https://brython.info/gallery/turtle.html
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(1)
t.forward(50)
print("Should be (50, 0):", t.position())
print("Should be 50: ", t.xcor())
print("Should be 0: ", t.ycor())
t.left(90)
t.color("blue")
t.speed(2)
t.fd(50)
print("Should be (50, 50):", t.pos())
print("Should be 225: ", t.towards(0, 0))
print("Should be 90: ", t.heading())
print("Should be approximately 71:", t.distance(0, 0))
# Draw the same square in three different angle modes
t.width(4)
print("Drawing using degrees - the default")
print("Heading should be 90: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(90)
print("Drawing using radians")
t.radians()
print("Heading should be pi/2: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(math.pi/2)
print("Drawing using gradients")
t.degrees(400)
print("Heading should be 100: ", t.heading())
for i in range(4):
    t.forward(100)
    t.left(100)
t.degrees()
t.width(1)
t.lt(90)
t.color("orange")
t.backward(50)
t.right(90)
t.color("green")
t.back(50)
t.rt(90)
t.color("red")
t.bk(50)
t.stamp()
t.speed(4)
t.color("black", "white")
t.goto(-100, 100)
t.stamp()
t.color("blue", "yellow")
t.setposition(0, 100)
t.stamp()
t.color("green", "white")
t.setpos(100, 100)
t.stamp()
t.speed(10)
t.color("orange")
t.sety(-100)
t.setx(-100)
t.stamp()
t.color("cyan")
t.home()
t.stamp()
t.color("green")
t.width(4)
t.setheading(180)
t.forward(150)
t.seth(90)
t.fd(20)
t.dot(30, "rgba(255, 0, 0, 0.2)")
t.color("red")
t.speed(0)
t.forward(30)
t.left(90)
t.circle(30)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle5" 的按鈕點按時, 執行 Turtle5 物件中的 prog 方法
doc["turtle5"].bind('click', Turtle5.prog)
</script>
</p>
<!-- turtle5 ends -->
<p></p>
<!-- turtle6 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle6 = beditor.editor("""# Turtle6 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
t = turtle.Turtle("turtle")
t.speed(10)
colors = ['red', 'purple', 'blue', 'green', 'orange']
for x in range(150):
    t.pencolor(colors[x % 5])
    t.width(x/10 + 1)
    t.forward(x)
    t.left(59)
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle6" 的按鈕點按時, 執行 Turtle6 物件中的 prog 方法
doc["turtle6"].bind('click', Turtle6.prog)
</script>
</p>
<!-- turtle6 ends -->
<p></p>
<!-- turtle7 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle7 = beditor.editor("""# Turtle7 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
screen=turtle.Screen()    #making a canvas for drawing
screen.bgcolor('black')    #making canvas black
trtl=turtle.Turtle()  #making a turtle
trtl.pencolor('red')    #making colour of the pen red
trtl.pensize(5)    #choosing the size of pen nib 
trtl.speed(10)    #choosing the speed of drawing
# shape should be ‘arrow’, ‘classic’, ‘turtle’ or ‘circle’
trtl.shape('turtle')   #choosing the shape of pen nib
trtl.forward(150)    #drawing a line of 150 pixels
trtl.right(90)    #asking turtle to turn 90 degrees
trtl.forward(150)    #drawing a line of 150 pixels
trtl.penup()    # preparing for moving pen without drawing
trtl.setpos(-140,-120)    # making the new position of the turtle
trtl.pendown()   # bringing the pen down for drawing again
trtl.pencolor('green')    # choosin the pen colour as green
trtl.write('Brython 烏龜繪圖', font=("Arial", 20, "bold"))    # chosing the font
trtl.penup()
trtl.ht()    # hiding the turtle from the screen
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle7" 的按鈕點按時, 執行 Turtle7 物件中的 prog 方法
doc["turtle7"].bind('click', Turtle7.prog)
</script>
</p>
<!-- turtle7 ends -->
<p></p>
<!-- turtle8 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Turtle8 = beditor.editor("""# Turtle8 繪圖
from browser import document as doc
import turtle
import math
turtle.set_defaults(
    turtle_canvas_wrapper = doc['brython_div']
)
wn = turtle.Screen() 
wn.bgcolor("black") 
skk = turtle.Turtle() 
skk.speed(10)
skk.shape("circle")
skk.color("blue") 
  
def sqrfunc(size): 
    for i in range(4): 
        skk.fd(size) 
        skk.left(90) 
        size = size-5
  
sqrfunc(146) 
sqrfunc(126) 
sqrfunc(106) 
sqrfunc(86) 
sqrfunc(66) 
sqrfunc(46) 
sqrfunc(26) 
turtle.done()
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "turtle8" 的按鈕點按時, 執行 Turtle8 物件中的 prog 方法
doc["turtle8"].bind('click', Turtle8.prog)
</script>
</p>
<!-- turtle8 ends -->
<p></p>
<!-- konva1 starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Konva1 = beditor.editor("""# Konva1 繪圖
# 引用 https://konvajs.github.io/ 繪圖
from browser import document, html, window
width = 600
height = 400
konva = window.Konva
# Konva 必須在 canvas 繪圖, 從上方設定,  canvas id 為 "container"
stage = konva.Stage.new({
        "container": 'brython_div',
        "width": width,
        "height": height
    })
layer = konva.Layer.new()
rectX = stage.getWidth() / 2 - 50
rectY = stage.getHeight() / 2 - 25
box = konva.Rect.new({
        "x": rectX,
        "y": rectY,
        "width": 100,
        "height": 50,
        "fill": '#00D2FF',
        "stroke": 'black',
        "strokeWidth": 4,
        "draggable": True
    })
def f1():
    document.body.style.cursor = 'pointer'
    
def f2():
    document.body.style.cursor = 'default'
# add cursor styling
box.on('mouseover', f1())
box.on('mouseout', f2())
layer.add(box)
stage.add(layer)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "konva1" 的按鈕點按時, 執行 Konva1 物件中的 prog 方法
doc["konva1"].bind('click', Konva1.prog)
</script>
</p>
<!-- konva1 ends -->
<p></p>
<!-- ycqsort starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ycqsort = beditor.editor("""# Ycombinator quicksort example
Y = lambda f: lambda *args: f(Y(f))(*args)
quicksort = Y(lambda f:
    lambda x: (
        f([item for item in x if item < x[0]])
        + [y for y in x if x[0] == y]
        + f([item for item in x if item > x[0]])
    ) if x else [])
    
print(quicksort([1, 3, 5, 4, 1, 3, 2]))
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ycqsort" 的按鈕點按時, 執行 Ycqsort 物件中的 prog 方法
doc["ycqsort"].bind('click', Ycqsort.prog)
</script>
</p>
<!-- ycqsort ends -->
<p></p>
<!-- ball starts -->
<p>
<script type="text/python3">
from browser import document as doc
import beditor
Ball = beditor.editor("""# Ggame ball example
from ggame import (
    App, 
    Color, 
    LineStyle, 
    Sprite, 
    RectangleAsset, 
    ImageAsset,
    CircleAsset, 
    EllipseAsset, 
    PolygonAsset,
)
from browser import document as doc
from browser import html
# 引入既有的id="graphics-column" 標註
graphics_column = doc["graphics-column"]
# 建立內定名稱為 "ggame-canvas" 的 canvas 標註
canvas = html.CANVAS(width = 600, height = 100)
canvas.id = "ggame-canvas"
# 將 canvas 插入 gc 標註中
graphics_column <= canvas
# reverse - change the ball direction
def reverse(b):
    b.direction *= -1
# Set up function for handling screen refresh
def step():
    if ball.go:
        ball.x += ball.direction
        if ball.x + ball.width > myapp.width or ball.x < 0:
            ball.x -= ball.direction
            reverse(ball)
myapp = App()
# Three primary colors with no transparency (alpha = 1.0)
red = Color(0xff0000, 1.0)
green = Color(0x00ff00, 1.0)
blue = Color(0x0000ff, 1.0)
black = Color(0x000000, 1.0)
# define colors and line style
green = Color(0x00ff00, 1)
black = Color(0, 1)
noline = LineStyle(0, black)
# a rectangle asset and sprite to use as background
bg_asset = RectangleAsset(canvas.width, canvas.height, noline, green)
bg = Sprite(bg_asset, (0,0))
ball_asset = ImageAsset("/images/orb-150545_640.png")
ball = Sprite(ball_asset, (0, 0))
# Original image is too big. Scale it to 1/10 its original size
ball.scale = 0.1
# custom attributes
ball.direction = 7
ball.go = True
myapp.run(step)
""", "kw_editor", "kw_console", "kw__container", "kw_py_src")
# id 為 "ball" 的按鈕點按時, 執行 Ball 物件中的 prog 方法
doc["ball"].bind('click', Ball.prog)
</script>
</p>
<!-- ball ends -->
<p><button id="keyword">Keyword</button><button id="ex1">Ex1</button><button id="ex2">Ex2</button><button id="ex3">Ex3</button><button id="ex4">Ex4</button><button id="forloop">Ex5</button><button id="guess">Guess</button><button id="autoguess">Autoguess</button><button id="lottery">大樂透</button><button id="weleadlottery">威力彩</button><button id="temp">Temp</button><button id="draw">Draw</button><button id="flag">Flag</button><button id="bezier">Bezier</button><button id="turtle1">Turtle1</button><button id="turtle2">Turtle2</button><button id="turtle3">Turtle3</button><button id="turtle4">Turtle4</button><button id="turtle5">Turtle5</button><button id="turtle6">Turtle6</button><button id="turtle7">Turtle7</button><button id="turtle8">Turtle8</button><button id="konva1">Konva1</button><button id="bunny">Bunny</button><button id="ball">Ball</button><button id="spur">Spur</button><button id="ycqsort">Ycqsort</button><button id="clear">Clear</button></p>
<h4>參考資料:</h4>
<p><a href="/downloads/turtle_intro.pdf">turtle_intro.pdf</a></p>
<p><a href="/downloads/turtle_intro2.pdf">turtle_intro2.pdf</a></p><h2>Virtualbox</h2>
<p>更改 win10_64_comsol5.5.vmdk 的 UUID</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">"c:\Program Files\Oracle\VirtualBox\VBoxManage.exe" internalcommands sethduuid win10_64_comsol5.5.vmdk</pre>
<p><br/><br/></p><h2>Ubuntu</h2>
<p>以下為建立 Ubuntu 20.04 虛擬主機, 用於網際內容管理, 電腦輔助設計實習與協同產品設計實習課程, 作爲區域網路或廣域網路伺服器主機課程練習之用.</p>
<p>由於每一台 Virtualbox 最多可以設定支援 36 片網路卡, 而且設定檔案可以透過程式方法控制各種設定, 因此適合用於上述課程中相關網際應用程式的部署使用, 也可以作為之後將網際程式配置到實體主機, 雲端主機或分散式版次管理系統 CI/CD 配置模擬.</p>
<p style="padding-left: 30px;">請登入 ＠gm 帳號後下載 <a href="https://drive.google.com/open?id=1lnMvowqRTWVgfaMClj2skGjURi148n71">Ubuntu20.04_cd2020pj1.vdi</a> (11 GB, 用於 CMSiMDE, CoppeliaSim, Pyslvs, Range3, NGSolve, Jupyter 網際程式開發)</p>
<p>因為在 Virtualbox 中的每一個虛擬硬碟檔案, 都必須要有獨立的 UUID, 因此若複製虛擬硬碟檔案, 而且要在同一電腦上使用, 可以使用下列指令變更 UUID:</p>
<p style="padding-left: 30px;">"c:\Program Files\Oracle\VirtualBox\VBoxManage.exe" internalcommands sethduuid registered_vdi.vdi</p>
<h4>Ubuntu Server (3GB)</h4>
<p>登入 @gm 帳號後, 下載 <a href="https://drive.google.com/open?id=1bUVxVBnMf1mxijl-iP-Sj19n8ASzqOF3">ubuntu-20.04-live-server-amd64.iso</a></p>
<p>或從 <a href="https://ubuntu.com/download/server">https://ubuntu.com/download/server</a> 下載 Ubuntu Server 20.04 iso 檔案, 利用 <a href="https://www.virtualbox.org/">Virtualbox</a> 建立成虛擬主機檔案.</p>
<h4>安裝 Graphical Environment (1GB)</h4>
<p style="padding-left: 30px;">sudo apt install xorg</p>
<h4>安裝 LXDE Window Manager (800 MB)</h4>
<p style="padding-left: 30px;">sudo apt install lxde</p>
<h4> 安裝 CMSiMDE 所需的 modules</h4>
<p style="padding-left: 30px;">若 pip3 尚未安裝, 則以 sudo apt install python3-pip  進行安裝 (增加 200MB)</p>
<p style="padding-left: 30px;">sudo pip3 install flask flask_cors lxml bs4 markdown pelican leo</p>
<h4>安裝開發 Oauth2 所需模組</h4>
<p style="padding-left: 30px;">sudo pip3 install authomatic github3.py</p>
<h4>安裝 CoppeliaSim</h4>
<p style="padding-left: 30px;">從 <a href="https://www.coppeliarobotics.com/ubuntuVersions">https://www.coppeliarobotics.com/ubuntuVersions</a>  下載 edu Linux 版本, 解開壓縮檔案後, 透過 coppelia.sh 執行.</p>
<p style="padding-left: 30px;">為了能直接在 Terminal 執行 CoppeliaSim 目錄中的 coppelia.sh, 可以編輯 /etc/profile</p>
<p style="padding-left: 30px;">加入 CoppeliaSim 所在目錄:</p>
<p style="padding-left: 30px;">export PATH=/home/kmol2020/coppeliasim4:PATH</p>
<p style="padding-left: 30px;">然後以 source /etc/profile 讓命令搜尋路徑設定生效.</p>
<h4>安裝 numpy, opencv-python 與 imutils 等 Python 3 模組, 用於影像辨識程式開發</h4>
<p style="padding-left: 30px;">sudo pip3 install numpy opencv-python imutils</p>
<h4>編譯 Pyslvs-UI</h4>
<p style="padding-left: 30px;">git clone --recurse-submodule <a href="https://github.com/kmolyuan/solvespace.git">https://github.com/kmolyuan/solvespace.git</a></p>
<p style="padding-left: 30px;">cd solvespace/cython</p>
<p style="padding-left: 30px;">sudo pip3 install -r requirements.txt</p>
<p style="padding-left: 30px;">sudo python3 setup.py install</p>
<p style="padding-left: 30px;">git clone --recurse-submodule <a href="https://github.com/kmolyuan/pyslvs-ui.git">https://github.com/kmolyuan/pyslvs-ui.git</a></p>
<p style="padding-left: 30px;">cd pyslvs-ui</p>
<p style="padding-left: 30px;">sudo pip3 install -r requirements.txt</p>
<p style="padding-left: 30px;">sudo python3 setup.py install</p>
<p style="padding-left: 30px;">完成後以 pyslvs 開啟.</p>
<h4>編譯 Range3</h4>
<p style="padding-left: 30px;">git clone <a href="https://github.com/Range-Software/range3.git">https://github.com/Range-Software/range3.git</a></p>
<p style="padding-left: 30px;">cd range3</p>
<p style="padding-left: 30px;">sudo ./scripts/prereqs_debian.sh</p>
<p style="padding-left: 30px;">./scripts/build.sh --clean &amp;&amp; ./scripts/create_package.sh</p>
<p style="padding-left: 30px;">執行</p>
<p style="padding-left: 30px;">cd build-Release/Range/</p>
<p style="padding-left: 30px;">./Range</p>
<p>修改所有用戶的指令搜尋路徑</p>
<p style="padding-left: 30px;">編輯 /etc/profile</p>
<p style="padding-left: 30px;">加入</p>
<p style="padding-left: 30px;">export PATH=/home/kmol2020/tmp/range3/build-Release/Range:PATH</p>
<p style="padding-left: 30px;">之後</p>
<p style="padding-left: 30px;">source /etc/profile</p>
<p style="padding-left: 30px;">接下來只要輸入 Range 就可以開啟 Range3</p>
<h4>安裝 NGSolve</h4>
<p style="padding-left: 30px;">sudo apt-add-repository universe<br/><br/>sudo add-apt-repository ppa:ngsolve/ngsolve</p>
<p style="padding-left: 30px;">sudo apt-get update<br/><br/>sudo apt-get install ngsolve</p>
<h4>xterm 設定</h4>
<p>.Xresources 檔案</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">xterm*font:     *-fixed-*-*-*-18-*</pre>
<p>讓 .Xresources 設定生效:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">xrdb ~/.Xresources</pre>
<h4>提高檔案開啟數量</h4>
<p style="padding-left: 30px;"><code>vi /etc/security/limits.conf</code></p>
<p style="padding-left: 30px;"><code>加入</code></p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">* - nofile 40960</pre>
<p style="padding-left: 30px;"> 利用</p>
<p style="padding-left: 30px;">ulimit -a | grep ‘open files’ 檢查</p>
<h4>安裝 Jupyterhub</h4>
<p style="padding-left: 30px;">install npm and nodejs</p>
<p style="padding-left: 60px;">sudo apt -y install npm nodejs</p>
<p style="padding-left: 30px;">install proxy with npm</p>
<p style="padding-left: 60px;">sudo npm install -g configurable-http-proxy</p>
<p style="padding-left: 30px;">install jupyterhub</p>
<p style="padding-left: 60px;">sudo pip3 install jupyterhub</p>
<p style="padding-left: 30px;">install jupyter notebook</p>
<p style="padding-left: 60px;">sudo pip3 install notebook</p>
<p style="padding-left: 30px;">完成上述安裝後, 可以利用 jupyterhub --no-ssl 在近端以內定 port 8000 測試.</p>
<p style="padding-left: 30px;">若要使用 https 啟動, 可利用</p>
<p style="padding-left: 60px;">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout jupyterhub.key -out jupyterhub.crt</p>
<p style="padding-left: 30px;">建立所需的 key 與 certificate, 然後以</p>
<p style="padding-left: 60px;">sudo jupyterhub --ip 192.168.56.3 --port 443 --ssl-key jupyterhub.key --ssl-cert jupyterhub.cert</p>
<p style="padding-left: 30px;">啟動後, 利用 <a href="https://192.168.56.3">https://192.168.56.3</a> 進行連線.</p>
<p style="padding-left: 30px;">其他與 Jupyterhub 有關的參考資料:</p>
<p style="padding-left: 60px;"><a href="http://project.mde.tw/blog/yen-ji-jie-she-ji-zhuan-ti-xue-yuan-de-sui-shen-jupyter-hub.html">http://project.mde.tw/blog/yen-ji-jie-she-ji-zhuan-ti-xue-yuan-de-sui-shen-jupyter-hub.html</a></p>
<p style="padding-left: 60px;"><a href="https://cadlab.mde.tw/post/jupyterhub-oauth2-deng-ru-she-ding.html">https://cadlab.mde.tw/post/jupyterhub-oauth2-deng-ru-she-ding.html</a></p>
<p style="padding-left: 60px;"><a href="https://chiamingyen.github.io/kmolab/blog/jin-duan-jupyterhub-dian-nao-zhu-ji-she-ding.html">https://chiamingyen.github.io/kmolab/blog/jin-duan-jupyterhub-dian-nao-zhu-ji-she-ding.html</a></p>
<p style="padding-left: 60px;"><a href="https://github.com/jupyterhub/jupyterhub/wiki/Installation-of-Jupyterhub-on-remote-server">https://github.com/jupyterhub/jupyterhub/wiki/Installation-of-Jupyterhub-on-remote-server</a></p>
<h4>利用網際 Python 程式解平面多連桿機構運動模擬方程式:</h4>
<p style="padding-left: 30px;"><a href="http://lab.kmol.info/2017fall/blog/kmol-brython-editor-331.html">http://lab.kmol.info/2017fall/blog/kmol-brython-editor-331.html</a></p><h3>伺服器管理</h3>
<p>常用指令:</p>
<p style="padding-left: 30px;">env - 列出 Shell 環境變數</p>
<p style="padding-left: 30px;">history - 列出歷史指令, 可利用上下 arrow 鍵列出先前輸入的指令, 也可以使用 Ctrl + p 與 Ctrl + N 往前或往後列出歷史指令.</p>
<p style="padding-left: 30px;">Ctrl + c - 終止指令執行</p>
<p style="padding-left: 30px;">Ctrl + z - 跳出互動指令執行模式</p>
<p style="padding-left: 30px;">cd - change directory</p>
<p style="padding-left: 30px;">pwd - print working directory</p>
<p style="padding-left: 30px;">mkdir - make directory</p>
<p style="padding-left: 30px;">rmdir - remove directory</p>
<p style="padding-left: 30px;">ls - list files</p>
<p style="padding-left: 30px;">rm - remove files</p>
<p style="padding-left: 30px;">cp - copy files</p>
<p style="padding-left: 30px;">mv - move files</p>
<p style="padding-left: 30px;">cat - display content of a file</p>
<p style="padding-left: 30px;">tail - show just the last lines of a file</p>
<p style="padding-left: 30px;">head - display first lines of a file</p>
<p style="padding-left: 30px;">grep - grep keyword files</p>
<p>重要檔案:</p>
<p style="padding-left: 30px;">每一用戶登入後都會執行 /etc/profile, 因此若有共用的環境變數, 可以寫進 /etc/profile 設定檔案</p>
<p></p><h3>Netplan</h3>
<p>若在 Windows 10 中啟動 Virtualbox Ubuntu 20.04 則可將網路設為 Host Only, 不使用 DHCP, 而進入 Ubuntu 之後, 以 netplan 手動設定在 Windows 10 可以連線的區域網路.</p>
<p>例如: Windows Gateway 設為 192.168.56.1, 而 Host Only 虛擬主機設為 192.168.56.2</p>
<p>/etc/netplan/00-installer-config.yaml</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">network:
  version: 2
  renderer: networkd
  ethernets:
    enp3s0:
      dhcp6: true
      addresses:
        - 10.10.10.2/24
      gateway4: 10.10.10.1
      nameservers:
          search: [mydomain, otherdomain]
          addresses: [10.10.10.1, 1.1.1.1]</pre>
<p></p><h1>Dartpad</h1>
<p>Notice: the <a href="https://developer.github.com/apps/building-github-apps/understanding-rate-limits-for-github-apps/">rate limits of Github Apps</a></p>
<p style="padding-left: 30px;"><a href="https://developer.github.com/v3/rate_limit/">Github rate limits</a></p>
<p style="padding-left: 30px;"><a href="https://docs.gitlab.com/ee/security/rate_limits.html">Gitlab rate limits setup</a></p>
<!-- 透過 getDart(dirname) 取位於 downloads/dart_ex/ 目錄中 dirname 目錄中的 Dart 程式碼 -->
<script>
function getDart(dirname){
    source = "https://mde.tw/wcm2020/downloads/dartpad/embed-dart.html?gh_owner=mdecourse&gh_repo=wcm2020&gh_path=downloads/dart_ex/" + dirname + "&theme=dark";
    document.getElementById("iframe").src = source ;
}

function getHtmlDart(dirname){
    source = "https://mde.tw/wcm2020/downloads/dartpad/embed-html.html?gh_owner=mdecourse&gh_repo=wcm2020&gh_path=downloads/dart_ex/" + dirname + "&theme=dark";
document.getElementById("iframe").src = source ;
}

function getFlutter(dirname){
    source = "https://mde.tw/wcm2020/downloads/dartpad/embed-flutter.html?gh_owner=mdecourse&gh_repo=wcm2020&gh_path=downloads/dart_ex/" + dirname + "&theme=dark";
document.getElementById("iframe").src = source ;
}

function largest(){
document.getElementById("iframe").width = document.body.clientWidth ;
document.getElementById("iframe").height = document.body.clientWidth*0.5 ;
}

function original(){
document.getElementById("iframe").width = 800 ;
document.getElementById("iframe").height = 600 ;
}
</script>
<!-- 取 Dart 程式的按鈕 -->
<p><a href="https://mde.tw/wcm2020/downloads/dartpad/">https://mde.tw/wcm2020/downloads/dartpad/</a> </p>
<h4>純 Dart 程式</h4>
<p><button onclick="getDart('hello')">Hello</button> <button onclick="getDart('for')">For Loop</button> <button onclick="getDart('sum')">Sum</button> <button onclick="getDart('runge_kutta')">Runge-Kutta</button> <button onclick="getDart('rk_ex1')">RK ex1</button> <button onclick="getDart('mass_spring_damping')">Mass Spring Damping</button> <button onclick="getDart('function')">Function</button> <button onclick="getDart('fun_parameter')">Function Parameter</button> <button onclick="getDart('fat_arrow')">Fat Arrow</button> <button onclick="getDart('temp1')">Temp 1</button></p>
<h4>Html 程式</h4>
<p><button onclick="getHtmlDart('random_grouping')">亂數分組</button> <button onclick="getHtmlDart('roc_flag')">ROC Flag</button> <button onclick="getHtmlDart('rotROC')">rot ROC</button> <button onclick="getHtmlDart('usaflag')">USA Flag</button> <button onclick="getHtmlDart('grid')">Grid</button> <button onclick="getHtmlDart('xyplot')">X-Y Plot</button> <button onclick="getHtmlDart('slithery')">Slithery</button> <button onclick="getHtmlDart('html_tetris')">Tetris</button></p>
<h4>Flutter 程式</h4>
<p><button onclick="getFlutter('flutter0')">Flutter0</button> <button onclick="getFlutter('flutter1')">Flutter1</button> <button onclick="getFlutter('flutter2')">Flutter2</button> <button onclick="getFlutter('flutter3')">Flutter3</button> <button onclick="getFlutter('flutter4')">Flutter4</button> <button onclick="getFlutter('flutter_counter')">Flutter Counter</button> <button onclick="getFlutter('flutter_roc')">ROC Flag</button> <button onclick="getFlutter('flutter_mine1')">踩地雷 1</button> <button onclick="getFlutter('flutter_mine2')">踩地雷 2</button> <button onclick="getFlutter('flutter_mine3')">踩地雷 3</button> <button onclick="getFlutter('flutter_mine4')">踩地雷 4</button> <button onclick="getFlutter('flutter_dropdown')">Dropdown</button> <button onclick="getFlutter('flutter_multiselect')">Multiselect</button> <button onclick="getFlutter('flutter_search')">Search</button> <button onclick="getFlutter('flutter_login')">Login</button> <button onclick="getFlutter('flutter_temp')">溫度轉換</button> <button onclick="getFlutter('flutter_ttt')">Tic-Tac-Toe</button> <button onclick="getFlutter('flutter_calculator')">Calculator</button> <button onclick="getFlutter('flutter_mouse1')">Mouse1</button> <button onclick="getFlutter('flutter_paint1')">Paint1</button></p>
<!-- 內建放入的 Dart 原始碼 -->
<p><button onclick="largest()">放大</button> <button onclick="original()">回復</button></p>
<p><iframe height="600" id="iframe" src="https://mde.tw/wcm2020/downloads/dartpad/embed-dart.html?gh_owner=mdecourse&amp;gh_repo=wcm2020&amp;gh_path=downloads/dart_ex/mass_spring_damping&amp;theme=dark" width="800"></iframe></p><h1>Project</h1>
<p>Build an online pdf file manipulation system.</p>
<p style="padding-left: 30px;">pdf file upload</p>
<p style="padding-left: 30px;">pdf file split</p>
<p style="padding-left: 30px;">pdf file merge</p>
<p>Build an online content management system.</p>
<p style="padding-left: 30px;">markdown editor</p>
<p style="padding-left: 30px;">markdown to LaTeX</p>
<p style="padding-left: 30px;">LaTeX to pdf</p>
<h4>References</h4>
<h4>Pypdf2 examples:</h4>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex1.py
import os
from PyPDF2 import PdfFileWriter, PdfFileReader

pdfReader = PdfFileReader(open("2002_Book_Real-WorldASPNETBuildingAConte.pdf", "rb"))
information = [("WhatIsCMS",18,45)]

for page in range(len(information)):
    pdf_writer = PdfFileWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.addPage(pdfReader.getPage(start-1))
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex2.py
import os
from PyPDF2 import PdfFileWriter, PdfFileReader

pdfReader = PdfFileReader(open("Beginning-Git-and-GitHub.pdf", "rb"))
information = [("GitAndGithub",17,105),("GitAndGithub",107,194),("GitAndGithub",196,289)]

for page in range(len(information)):
    pdf_writer = PdfFileWriter()
    start = information[page][1]
    end = information[page][2]
    while start&lt;=end:
        pdf_writer.addPage(pdfReader.getPage(start-1))
        start+=1
    if not os.path.exists("./"):
        os.makedirs(savepath)
    output_filename = '{}_{}_page_{}.pdf'.format(information[page][0],information[page][1], information[page][2])
    with open(output_filename,'wb') as out:
        pdf_writer.write(out)
</pre>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># pypdf2_ex3.py
# merge several pdf files
import sys
import PyPDF2

pdf_write_object = PyPDF2.PdfFileWriter()

#for i in sys.argv[1:]:
for i in ["WhatIsCMS.pdf","InforLifeCycle.pdf","EnterpriseContentManage.pdf"]:
    pdf_read_object = PyPDF2.PdfFileReader(i)
    print('processing file : '+ i + 'number of pages : ' +  str(pdf_read_object.numPages))
    for page in range(pdf_read_object.numPages):
        pdf_write_object.addPage(pdf_read_object.getPage(page))

final_file_object = open('2020CMS.pdf', 'wb')
pdf_write_object.write(final_file_object)
final_file_object.close()
</pre>
<h4>Python:</h4>
<p>Learn to Program with Python 3</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-3879-0">https://link.springer.com/book/10.1007/978-1-4842-3879-0</a></p>
<p><a href="https://github.com/mstamy2/PyPDF2">https://github.com/mstamy2/PyPDF2</a></p>
<p>Building REST APIs with Flask</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5022-8">https://link.springer.com/book/10.1007/978-1-4842-5022-8</a></p>
<p>The Definitive Guide to SQLite</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4302-3226-1">https://link.springer.com/book/10.1007/978-1-4302-3226-1</a></p>
<hr/>
<h4>Dart:</h4>
<p>Quick Start Guide to Dart Programming</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5562-9">https://link.springer.com/book/10.1007/978-1-4842-5562-9</a></p>
<p>Practical Flutter</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-4972-7">https://link.springer.com/book/10.1007/978-1-4842-4972-7</a></p>
<p>Beginning App Development with Flutter</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5181-2">https://link.springer.com/book/10.1007/978-1-4842-5181-2</a></p>
<p>Backend Framework in Dart:</p>
<p style="padding-left: 30px;"><a href="https://angel-dart.dev/">https://angel-dart.dev/</a></p>
<hr/>
<h4>LaTeX, Markdown and Pandoc</h4>
<p>Login to your gm email account and download</p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1V4Zkg1B3nVyEZxkCMiS8-okTZ3JEp0zT/view?usp=sharing">2017_LaTeXIn24Hours.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1QY0ljZGzWMHCkxn5LA_GCd04C8otF1RF/view?usp=sharing">2014_PracticalLaTeX.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/1Uj0JsOqKLcPtpwXXnDsV0V3gdalquqsp/view?usp=sharing">2016_MoreMathIntoLaTeX.pdf</a></p>
<p style="padding-left: 30px;"><a href="https://drive.google.com/file/d/13qrqKKznk2E62q076HLxmaC4FRKlV-LQ/view?usp=sharing">2019_IntroducingMarkdownAndPandoc.pdf</a></p>
<p><a href="https://pandoc.org/">https://pandoc.org/</a></p>
<p><a href="https://yihui.org/tinytex/">https://yihui.org/tinytex/</a></p><h2>Tools</h2>
<p>W1: <a href="https://github.com/mdecourse/wcm2020/blob/master/downloads/portable/wcm2020_w1.zip">https://github.com/mdecourse/wcm2020/blob/master/downloads/portable/wcm2020_w1.zip</a> 19MB</p>
<p><a href="https://drive.google.com/open?id=1SvMKQFViJ0mskt20UhSqkjzckB3noSJH">wcm2020_w2.7z</a> 325 MB  (登入 gm 後下載)</p>
<p><a href="https://drive.google.com/open?id=1mULnC9CYkd-BYMDwmOf-asvuM4tQ3yGT">msys64_201905_clean.7z</a> 66MB <span>(登入 gm 後下載)</span></p>
<p><a href="https://drive.google.com/open?id=1uSYmnzalk1lFG0yxZgTavWENVd37yndK">wcm2020_w3.7z</a> 948 MB<span> </span><span>(登入 gm 後下載)</span> </p>
<h2>File Upload</h2>
<p>Example 1:</p>
<p style="padding-left: 30px;"><a href="https://gist.github.com/tanaikech/88fcae255abb4aac5bec81ad5ca213ef">https://gist.github.com/tanaikech/88fcae255abb4aac5bec81ad5ca213ef</a></p>
<p>Example 2:</p>
<p style="padding-left: 30px;"><a href="https://github.com/sashee/drive-api-from-js">https://github.com/sashee/drive-api-from-js</a></p>
<p>Example 3:</p>
<p style="padding-left: 30px;"><a href="https://gist.github.com/tanaikech/2f16f467c94612dc83920a3158614d95">https://gist.github.com/tanaikech/2f16f467c94612dc83920a3158614d95</a></p>
<p>Example 4:</p>
<p style="padding-left: 30px;"><a href="https://gist.github.com/tanaikech/bd53b366aedef70e35a35f449c51eced">https://gist.github.com/tanaikech/bd53b366aedef70e35a35f449c51eced</a> </p>
<p>Example 5:</p>
<pre class="brush:js;auto-links:false;toolbar:false" contenteditable="false">// upload.js, from https://github.com/googledrive/cors-upload-sample
// Contributors Steve Bazyl, Mike Procopio, Jeffrey Posnick, Renaud Sauvain
// License: Apache 2.0 http://www.apache.org/licenses/LICENSE-2.0
//
// Implements Resumable Upload for Google Drive as described by
// https://developers.google.com/drive/v3/web/resumable-upload
//
// Modified by Paul Brewer, Economic and Financial Technology Consulting LLC
// Nov. 1 2017
//  1. use Google Drive API V3 instead of V2
//  2. wrap code in a "use strict" IIFE, only exposing MediaUploader
//  3. explicitly export MediaUploader as window.UploaderForGoogleDrive
//  4. if options.token undefined, get access token from existing window.gapi instance, if any
//
// Nov. 7, 2017
//  5. Change file metadata "title" to "name" in line with Drive API v2--&gt;v3 migration advisory
//  6. export promise wrapper as window.pUploaderForGoogleDrive

// jshint browser:true, strict:true

window.UploaderForGoogleDrive = (function(){
    "use strict";

    /**
     * Helper for implementing retries with backoff. Initial retry
     * delay is 1 second, increasing by 2x (+jitter) for subsequent retries
     *
     * @constructor
     */

    var RetryHandler = function() {
	this.interval = 1000; // Start at one second
	this.maxInterval = 60 * 1000; // Don't wait longer than a minute 
    };

    /**
     * Invoke the function after waiting
     *
     * @param {function} fn Function to invoke
     */
    RetryHandler.prototype.retry = function(fn) {
	setTimeout(fn, this.interval);
	this.interval = this.nextInterval_();
    };

    /**
     * Reset the counter (e.g. after successful request.)
     */
    RetryHandler.prototype.reset = function() {
	this.interval = 1000;
    };

    /**
     * Calculate the next wait time.
     * @return {number} Next wait interval, in milliseconds
     *
     * @private
     */
    RetryHandler.prototype.nextInterval_ = function() {
	var interval = this.interval * 2 + this.getRandomInt_(0, 1000);
	return Math.min(interval, this.maxInterval);
    };

    /**
     * Get a random int in the range of min to max. Used to add jitter to wait times.
     *
     * @param {number} min Lower bounds
     * @param {number} max Upper bounds
     * @private
     */
    RetryHandler.prototype.getRandomInt_ = function(min, max) {
	return Math.floor(Math.random() * (max - min + 1) + min);
    };


    /**
     * Helper class for resumable uploads using XHR/CORS. Can upload any Blob-like item, whether
     * files or in-memory constructs.
     *
     * @example
     * var content = new Blob(["Hello world"], {"type": "text/plain"});
     * var uploader = new MediaUploader({
     *   file: content,
     *   token: accessToken,
     *   onComplete: function(data) { ... }
     *   onError: function(data) { ... }
     * });
     * uploader.upload();
     *
     * @constructor
     * @param {object} options Hash of options
     * @param {string} options.token Access token
     * @param {blob} options.file Blob-like item to upload
     * @param {string} [options.fileId] ID of file if replacing
     * @param {object} [options.params] Additional query parameters
     * @param {string} [options.contentType] Content-type, if overriding the type of the blob.
     * @param {object} [options.metadata] File metadata
     * @param {function} [options.onComplete] Callback for when upload is complete
     * @param {function} [options.onProgress] Callback for status for the in-progress upload
     * @param {function} [options.onError] Callback if upload fails
     */
    var MediaUploader = function(options) {
	var noop = function() {};
	this.file = options.file;
	this.contentType = options.contentType || this.file.type || 'application/octet-stream';
	this.metadata = options.metadata || {
	    'name': this.file.name,
	    'mimeType': this.contentType
	};
	// if options.token omitted, get access_token from existing window.gapi instance, if any : PJB 2017-11-01
	// see https://developers.google.com/api-client-library/javascript/reference/referencedocs
	if (options.token){
	    this.token = options.token;
	} else {
	    try {
		this.token = (window.gapi
			      .auth2
			      .getAuthInstance()
			      .currentUser
			      .get()
			      .getAuthResponse(true)
			      .access_token
			     );
	    } catch(e){
		console.log(e);
		throw new Error("Uploader: missing Google OAuth2 access_token");
	    }
	}
	// end access_token patch -- PJB 2017-11-01
	this.onComplete = options.onComplete || noop;
	this.onProgress = options.onProgress || noop;
	this.onError = options.onError || noop;
	this.offset = options.offset || 0;
	this.chunkSize = options.chunkSize || 0;
	this.retryHandler = new RetryHandler();

	this.url = options.url;
	if (!this.url) {
	    var params = options.params || {};
	    params.uploadType = 'resumable';
	    this.url = this.buildUrl_(options.fileId, params, options.baseUrl);
	}
	// PJB 2018.01.22 Change "update/replace" method from "PUT" to "PATCH"
	//   per https://developers.google.com/drive/v3/reference/files/update
	this.httpMethod = options.fileId ? 'PATCH' : 'POST';
    };

    /**
     * Initiate the upload.
     */
    MediaUploader.prototype.upload = function() {
	var self = this;
	var xhr = new XMLHttpRequest();

	xhr.open(this.httpMethod, this.url, true);
	xhr.setRequestHeader('Authorization', 'Bearer ' + this.token);
	xhr.setRequestHeader('Content-Type', 'application/json');
	xhr.setRequestHeader('X-Upload-Content-Length', this.file.size);
	xhr.setRequestHeader('X-Upload-Content-Type', this.contentType);

	xhr.onload = function(e) {
	    if (e.target.status &lt; 400) {
		var location = e.target.getResponseHeader('Location');
		this.url = location;
		this.sendFile_();
	    } else {
		this.onUploadError_(e);
	    }
	}.bind(this);
	xhr.onerror = this.onUploadError_.bind(this);
	xhr.send(JSON.stringify(this.metadata));
    };

    /**
     * Send the actual file content.
     *
     * @private
     */
    MediaUploader.prototype.sendFile_ = function() {
	var content = this.file;
	var end = this.file.size;

	if (this.offset || this.chunkSize) {
	    // Only bother to slice the file if we're either resuming or uploading in chunks
	    if (this.chunkSize) {
		end = Math.min(this.offset + this.chunkSize, this.file.size);
	    }
	    content = content.slice(this.offset, end);
	}

	var xhr = new XMLHttpRequest();
	xhr.open('PUT', this.url, true);
	xhr.setRequestHeader('Content-Type', this.contentType);
	xhr.setRequestHeader('Content-Range', "bytes " + this.offset + "-" + (end - 1) + "/" + this.file.size);
	xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);
	if (xhr.upload) {
	    xhr.upload.addEventListener('progress', this.onProgress);
	}
	xhr.onload = this.onContentUploadSuccess_.bind(this);
	xhr.onerror = this.onContentUploadError_.bind(this);
	xhr.send(content);
    };

    /**
     * Query for the state of the file for resumption.
     *
     * @private
     */
    MediaUploader.prototype.resume_ = function() {
	var xhr = new XMLHttpRequest();
	xhr.open('PUT', this.url, true);
	xhr.setRequestHeader('Content-Range', "bytes */" + this.file.size);
	xhr.setRequestHeader('X-Upload-Content-Type', this.file.type);
	if (xhr.upload) {
	    xhr.upload.addEventListener('progress', this.onProgress);
	}
	xhr.onload = this.onContentUploadSuccess_.bind(this);
	xhr.onerror = this.onContentUploadError_.bind(this);
	xhr.send();
    };

    /**
     * Extract the last saved range if available in the request.
     *
     * @param {XMLHttpRequest} xhr Request object
     */
    MediaUploader.prototype.extractRange_ = function(xhr) {
	var range = xhr.getResponseHeader('Range');
	if (range) {
	    this.offset = parseInt(range.match(/\d+/g).pop(), 10) + 1;
	}
    };

    /**
     * Handle successful responses for uploads. Depending on the context,
     * may continue with uploading the next chunk of the file or, if complete,
     * invokes the caller's callback.
     *
     * @private
     * @param {object} e XHR event
     */
    MediaUploader.prototype.onContentUploadSuccess_ = function(e) {
	if (e.target.status == 200 || e.target.status == 201) {
	    this.onComplete(e.target.response);
	} else if (e.target.status == 308) {
	    this.extractRange_(e.target);
	    this.retryHandler.reset();
	    this.sendFile_();
	} else {
	    this.onContentUploadError_(e);
	}
    };

    /**
     * Handles errors for uploads. Either retries or aborts depending
     * on the error.
     *
     * @private
     * @param {object} e XHR event
     */
    MediaUploader.prototype.onContentUploadError_ = function(e) {
	if (e.target.status &amp;&amp; e.target.status &lt; 500) {
	    this.onError(e.target.response);
	} else {
	    this.retryHandler.retry(this.resume_.bind(this));
	}
    };

    /**
     * Handles errors for the initial request.
     *
     * @private
     * @param {object} e XHR event
     */
    MediaUploader.prototype.onUploadError_ = function(e) {
	this.onError(e.target.response); // TODO - Retries for initial upload
    };

    /**
     * Construct a query string from a hash/object
     *
     * @private
     * @param {object} [params] Key/value pairs for query string
     * @return {string} query string
     */
    MediaUploader.prototype.buildQuery_ = function(params) {
	params = params || {};
	return Object.keys(params).map(function(key) {
	    return encodeURIComponent(key) + '=' + encodeURIComponent(params[key]);
	}).join('&amp;');
    };

    /**
     * Build the drive upload URL
     *
     * @private
     * @param {string} [id] File ID if replacing
     * @param {object} [params] Query parameters
     * @return {string} URL
     */
    MediaUploader.prototype.buildUrl_ = function(id, params, baseUrl) {
	// modified next line to use v3, not v2 -- PJB, 2017-11-01
	var url = baseUrl || 'https://www.googleapis.com/upload/drive/v3/files/';
	if (id) {
	    url += id;
	}
	var query = this.buildQuery_(params);
	if (query) {
	    url += '?' + query;
	}
	return url;
    };


    return MediaUploader;
    
})();

window.pUploaderForGoogleDrive = function(options){
    "use strict";
    return new Promise(function(resolve, reject){
	options.onComplete = function(r){
	    var response;
	    try {
		response = (typeof(r)==='string')? JSON.parse(r): r;
	    } catch(e){
		response = r;
	    }
	    resolve(response);
	};
	options.onError = function(e){ reject(e); };
	var uploader = new window.UploaderForGoogleDrive(options);
	uploader.upload();
    });
};
</pre>
<p></p><h2>Python as backend</h2>
<p>Web based PDF file manipulation system</p>
<p style="padding-left: 30px;">A Beginners Guide to Python 3 Programming</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-3-030-20290-3">https://link.springer.com/book/10.1007/978-3-030-20290-3</a></p>
<p style="padding-left: 30px;"><a href="https://github.com/mstamy2/PyPDF2">https://github.com/mstamy2/PyPDF2</a></p>
<p style="padding-left: 30px;">Building REST APIs with Flask</p>
<p style="padding-left: 60px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-5022-8">https://link.springer.com/book/10.1007/978-1-4842-5022-8</a></p>
<p>CMSiMDE (integrated with Pelican blog and Reveal.js)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a></p>
<p>Temp Conversion (Dart as frontend)</p>
<p style="padding-left: 30px;"><a href="http://mde.tw/cp2019/content/Temp%20Conv.html">http://mde.tw/cp2019/content/Temp%20Conv.html</a></p>
<p>Pygrouf (linked with SQLite, MySQL and PostgreSQL)</p>
<p style="padding-left: 30px;"><a href="https://github.com/chiamingyen/pygrouf">https://github.com/chiamingyen/pygrouf</a></p>
<p>CP to CAD (deployment with <a href="https://www.heroku.com/">https://www.heroku.com/</a>)</p>
<p style="padding-left: 30px;"><a href="https://github.com/mdecourse/wcms-scrum1">https://github.com/mdecourse/wcms-scrum1</a></p>
<p>Web-based Laboratory 2020</p>
<p style="padding-left: 30px;">based on <a href="https://link.springer.com/book/10.1007/b138627">Creating Web-based Laboratories</a> (2004 with Matlab and Simulink)</p><h2>Dart as backend</h2>
<h4>Dart-Angel</h4>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/UzuecP3utk8" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/iPbM10mvpko" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/jM9-JtIbokQ" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/dMIdLiwksUE" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/3T4iYYgpCJw" width="560"></iframe></p>
<p><iframe allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/ggmjumYogEo" width="560"></iframe></p>
<h4>Aquenduct</h4>
<p><a href="https://aqueduct.io/">https://aqueduct.io/</a></p>
<h2>Threejs</h2>
<p><a href="https://threejs.org/docs/">https://threejs.org/docs/</a> </p>
<p>Essential TypeScript</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-4979-6">https://link.springer.com/book/10.1007/978-1-4842-4979-6</a></p>
<p><a href="https://github.com/threeDart/three.dart">https://github.com/threeDart/three.dart</a></p>
<p style="padding-left: 30px;"><a href="http://threedart.github.io/three.dart/">http://threedart.github.io/three.dart/</a></p>
<p><a href="https://github.com/block-forest/threejs-dart-facade">https://github.com/block-forest/threejs-dart-facade</a></p>
<p><a href="https://pub.dev/packages/webgl_helper">https://pub.dev/packages/webgl_helper</a> </p><h2>CNC</h2>
<p><a href="https://github.com/grbl/grbl">https://github.com/grbl/grbl</a> </p>
<p><a href="https://github.com/filipecaixeta/cncwebsim">https://github.com/filipecaixeta/cncwebsim</a> </p>
<h2>WebVR</h2>
<p>Learning Web-based Virtual Reality</p>
<p style="padding-left: 30px;"><a href="https://link.springer.com/book/10.1007/978-1-4842-2710-7">https://link.springer.com/book/10.1007/978-1-4842-2710-7</a></p>
<p style="padding-left: 30px;"><a href="https://glitch.com/~fancy-python">https://glitch.com/~fancy-python</a></p>
<p style="padding-left: 60px;"><a href="https://aframe.io/">https://aframe.io/</a></p>
<p><a href="https://www.roadtovr.com/4-steps-to-start-experimenting-with-webvr-in-10-minutes/">https://www.roadtovr.com/4-steps-to-start-experimenting-with-webvr-in-10-minutes/</a></p>
<p style="padding-left: 30px;"><a href="http://borismus.github.io/webvr-boilerplate/">http://borismus.github.io/webvr-boilerplate/</a></p>
<p><a href="https://skywell.software/blog/what-is-webvr-and-how-to-use-it/">https://skywell.software/blog/what-is-webvr-and-how-to-use-it/</a></p>
<h4>Flutter and AR</h4>
<p style="padding-left: 30px;"><a href="https://medium.com/flutterpub/flutter-and-ar-a65bb202c5d8">https://medium.com/flutterpub/flutter-and-ar-a65bb202c5d8</a></p>
<p style="padding-left: 30px;"><a href="https://flatteredwithflutter.com/how-to-create-ar-in-flutter/">https://flatteredwithflutter.com/how-to-create-ar-in-flutter/</a></p>
<p style="padding-left: 30px;"><a href="https://pub.dev/packages/arcore_flutter_plugin">https://pub.dev/packages/arcore_flutter_plugin</a></p>